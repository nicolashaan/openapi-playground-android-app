/**
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.42
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException

import org.openapitools.client.models.ComplianceJobStatus
import org.openapitools.client.models.ComplianceJobType
import org.openapitools.client.models.Error
import org.openapitools.client.models.InlineObject5
import org.openapitools.client.models.MultiComplianceJobResponse
import org.openapitools.client.models.Problem
import org.openapitools.client.models.SingleComplianceJobResponse

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class ComplianceApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.twitter.com")
        }
    }

    /**
    * Create compliance job
    * Creates a compliance for the given job type
    * @param inlineObject5  
    * @return SingleComplianceJobResponse
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createBatchComplianceJob(inlineObject5: InlineObject5) : SingleComplianceJobResponse {
        val localVarResponse = createBatchComplianceJobWithHttpInfo(inlineObject5 = inlineObject5)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SingleComplianceJobResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Create compliance job
    * Creates a compliance for the given job type
    * @param inlineObject5  
    * @return ApiResponse<SingleComplianceJobResponse?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createBatchComplianceJobWithHttpInfo(inlineObject5: InlineObject5) : ApiResponse<SingleComplianceJobResponse?> {
        val localVariableConfig = createBatchComplianceJobRequestConfig(inlineObject5 = inlineObject5)

        return request<InlineObject5, SingleComplianceJobResponse>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation createBatchComplianceJob
    *
    * @param inlineObject5  
    * @return RequestConfig
    */
    fun createBatchComplianceJobRequestConfig(inlineObject5: InlineObject5) : RequestConfig<InlineObject5> {
        val localVariableBody = inlineObject5
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/2/compliance/jobs",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get compliance job
    * Returns a single compliance job by ID
    * @param id ID of the compliance job to retrieve. 
    * @return SingleComplianceJobResponse
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getBatchComplianceJob(id: kotlin.String) : SingleComplianceJobResponse {
        val localVarResponse = getBatchComplianceJobWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SingleComplianceJobResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get compliance job
    * Returns a single compliance job by ID
    * @param id ID of the compliance job to retrieve. 
    * @return ApiResponse<SingleComplianceJobResponse?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getBatchComplianceJobWithHttpInfo(id: kotlin.String) : ApiResponse<SingleComplianceJobResponse?> {
        val localVariableConfig = getBatchComplianceJobRequestConfig(id = id)

        return request<Unit, SingleComplianceJobResponse>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getBatchComplianceJob
    *
    * @param id ID of the compliance job to retrieve. 
    * @return RequestConfig
    */
    fun getBatchComplianceJobRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/compliance/jobs/{id}".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List compliance jobs
    * Returns recent compliance jobs for a given job type and optional job status
    * @param type Type of compliance job to list. 
    * @param status Status of compliance job to list. (optional)
    * @return MultiComplianceJobResponse
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listBatchComplianceJobs(type: ComplianceJobType, status: ComplianceJobStatus?) : MultiComplianceJobResponse {
        val localVarResponse = listBatchComplianceJobsWithHttpInfo(type = type, status = status)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MultiComplianceJobResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * List compliance jobs
    * Returns recent compliance jobs for a given job type and optional job status
    * @param type Type of compliance job to list. 
    * @param status Status of compliance job to list. (optional)
    * @return ApiResponse<MultiComplianceJobResponse?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listBatchComplianceJobsWithHttpInfo(type: ComplianceJobType, status: ComplianceJobStatus?) : ApiResponse<MultiComplianceJobResponse?> {
        val localVariableConfig = listBatchComplianceJobsRequestConfig(type = type, status = status)

        return request<Unit, MultiComplianceJobResponse>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation listBatchComplianceJobs
    *
    * @param type Type of compliance job to list. 
    * @param status Status of compliance job to list. (optional)
    * @return RequestConfig
    */
    fun listBatchComplianceJobsRequestConfig(type: ComplianceJobType, status: ComplianceJobStatus?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("type", listOf(type.toString()))
                if (status != null) {
                    put("status", listOf(status.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/compliance/jobs",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
