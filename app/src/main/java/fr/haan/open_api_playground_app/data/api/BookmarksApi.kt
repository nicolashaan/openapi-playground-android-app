/**
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.42
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package fr.haan.open_api_playground_app.data.api

import java.io.IOException

import fr.haan.open_api_playground_app.data.entities.AddBookmarkRequestEntity
import fr.haan.open_api_playground_app.data.entities.BookmarkMutationResponseEntity
import fr.haan.open_api_playground_app.data.entities.ErrorEntity
import fr.haan.open_api_playground_app.data.entities.GenericTweetsTimelineResponseEntity
import fr.haan.open_api_playground_app.data.entities.ProblemEntity

import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class BookmarksApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.twitter.com")
        }
    }

    /**
     * enum for parameter expansions
     */
     enum class Expansions_getUsersIdBookmarks(val value: kotlin.String) {
         @SerialName(value = "author_id") authorId("author_id"),
         @SerialName(value = "referenced_tweets.id") referencedTweetsPeriodId("referenced_tweets.id"),
         @SerialName(value = "in_reply_to_user_id") inReplyToUserId("in_reply_to_user_id"),
         @SerialName(value = "geo.place_id") geoPeriodPlaceId("geo.place_id"),
         @SerialName(value = "attachments.media_keys") attachmentsPeriodMediaKeys("attachments.media_keys"),
         @SerialName(value = "attachments.poll_ids") attachmentsPeriodPollIds("attachments.poll_ids"),
         @SerialName(value = "entities.mentions.username") entitiesPeriodMentionsPeriodUsername("entities.mentions.username"),
         @SerialName(value = "referenced_tweets.id.author_id") referencedTweetsPeriodIdPeriodAuthorId("referenced_tweets.id.author_id"),
         ;
     }

    /**
     * enum for parameter tweetFields
     */
     enum class TweetFields_getUsersIdBookmarks(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "created_at") createdAt("created_at"),
         @SerialName(value = "text") text("text"),
         @SerialName(value = "author_id") authorId("author_id"),
         @SerialName(value = "in_reply_to_user_id") inReplyToUserId("in_reply_to_user_id"),
         @SerialName(value = "referenced_tweets") referencedTweets("referenced_tweets"),
         @SerialName(value = "attachments") attachments("attachments"),
         @SerialName(value = "withheld") withheld("withheld"),
         @SerialName(value = "geo") geo("geo"),
         @SerialName(value = "entities") entities("entities"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         @SerialName(value = "possibly_sensitive") possiblySensitive("possibly_sensitive"),
         @SerialName(value = "source") source("source"),
         @SerialName(value = "lang") lang("lang"),
         @SerialName(value = "context_annotations") contextAnnotations("context_annotations"),
         @SerialName(value = "non_public_metrics") nonPublicMetrics("non_public_metrics"),
         @SerialName(value = "promoted_metrics") promotedMetrics("promoted_metrics"),
         @SerialName(value = "organic_metrics") organicMetrics("organic_metrics"),
         @SerialName(value = "conversation_id") conversationId("conversation_id"),
         @SerialName(value = "reply_settings") replySettings("reply_settings"),
         ;
     }

    /**
     * enum for parameter userFields
     */
     enum class UserFields_getUsersIdBookmarks(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "created_at") createdAt("created_at"),
         @SerialName(value = "name") name("name"),
         @SerialName(value = "username") username("username"),
         @SerialName(value = "protected") `protected`("protected"),
         @SerialName(value = "verified") verified("verified"),
         @SerialName(value = "withheld") withheld("withheld"),
         @SerialName(value = "profile_image_url") profileImageUrl("profile_image_url"),
         @SerialName(value = "location") location("location"),
         @SerialName(value = "url") url("url"),
         @SerialName(value = "description") description("description"),
         @SerialName(value = "entities") entities("entities"),
         @SerialName(value = "pinned_tweet_id") pinnedTweetId("pinned_tweet_id"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         ;
     }

    /**
     * enum for parameter mediaFields
     */
     enum class MediaFields_getUsersIdBookmarks(val value: kotlin.String) {
         @SerialName(value = "media_key") mediaKey("media_key"),
         @SerialName(value = "duration_ms") durationMs("duration_ms"),
         @SerialName(value = "height") height("height"),
         @SerialName(value = "preview_image_url") previewImageUrl("preview_image_url"),
         @SerialName(value = "type") type("type"),
         @SerialName(value = "url") url("url"),
         @SerialName(value = "width") width("width"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         @SerialName(value = "non_public_metrics") nonPublicMetrics("non_public_metrics"),
         @SerialName(value = "organic_metrics") organicMetrics("organic_metrics"),
         @SerialName(value = "promoted_metrics") promotedMetrics("promoted_metrics"),
         @SerialName(value = "alt_text") altText("alt_text"),
         @SerialName(value = "variants") variants("variants"),
         ;
     }

    /**
     * enum for parameter placeFields
     */
     enum class PlaceFields_getUsersIdBookmarks(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "name") name("name"),
         @SerialName(value = "country_code") countryCode("country_code"),
         @SerialName(value = "place_type") placeType("place_type"),
         @SerialName(value = "full_name") fullName("full_name"),
         @SerialName(value = "country") country("country"),
         @SerialName(value = "contained_within") containedWithin("contained_within"),
         @SerialName(value = "geo") geo("geo"),
         ;
     }

    /**
     * enum for parameter pollFields
     */
     enum class PollFields_getUsersIdBookmarks(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "options") options("options"),
         @SerialName(value = "voting_status") votingStatus("voting_status"),
         @SerialName(value = "end_datetime") endDatetime("end_datetime"),
         @SerialName(value = "duration_minutes") durationMinutes("duration_minutes"),
         ;
     }

    /**
    * Bookmarks by User
    * Returns Tweet objects that have been bookmarked by the requesting user
    * @param id The ID of the user for whom to return results 
    * @param maxResults The maximum number of results (optional)
    * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param tweetFields A comma separated list of Tweet fields to display. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @param mediaFields A comma separated list of Media fields to display. (optional)
    * @param placeFields A comma separated list of Place fields to display. (optional)
    * @param pollFields A comma separated list of Poll fields to display. (optional)
    * @return GenericTweetsTimelineResponseEntity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getUsersIdBookmarks(id: kotlin.String, maxResults: kotlin.Int?, paginationToken: kotlin.String?, expansions: kotlin.collections.List<Expansions_getUsersIdBookmarks>?, tweetFields: kotlin.collections.List<TweetFields_getUsersIdBookmarks>?, userFields: kotlin.collections.List<UserFields_getUsersIdBookmarks>?, mediaFields: kotlin.collections.List<MediaFields_getUsersIdBookmarks>?, placeFields: kotlin.collections.List<PlaceFields_getUsersIdBookmarks>?, pollFields: kotlin.collections.List<PollFields_getUsersIdBookmarks>?) : GenericTweetsTimelineResponseEntity {
        val localVarResponse = getUsersIdBookmarksWithHttpInfo(id = id, maxResults = maxResults, paginationToken = paginationToken, expansions = expansions, tweetFields = tweetFields, userFields = userFields, mediaFields = mediaFields, placeFields = placeFields, pollFields = pollFields)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GenericTweetsTimelineResponseEntity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Bookmarks by User
    * Returns Tweet objects that have been bookmarked by the requesting user
    * @param id The ID of the user for whom to return results 
    * @param maxResults The maximum number of results (optional)
    * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param tweetFields A comma separated list of Tweet fields to display. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @param mediaFields A comma separated list of Media fields to display. (optional)
    * @param placeFields A comma separated list of Place fields to display. (optional)
    * @param pollFields A comma separated list of Poll fields to display. (optional)
    * @return ApiResponse<GenericTweetsTimelineResponseEntity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getUsersIdBookmarksWithHttpInfo(id: kotlin.String, maxResults: kotlin.Int?, paginationToken: kotlin.String?, expansions: kotlin.collections.List<Expansions_getUsersIdBookmarks>?, tweetFields: kotlin.collections.List<TweetFields_getUsersIdBookmarks>?, userFields: kotlin.collections.List<UserFields_getUsersIdBookmarks>?, mediaFields: kotlin.collections.List<MediaFields_getUsersIdBookmarks>?, placeFields: kotlin.collections.List<PlaceFields_getUsersIdBookmarks>?, pollFields: kotlin.collections.List<PollFields_getUsersIdBookmarks>?) : ApiResponse<GenericTweetsTimelineResponseEntity?> {
        val localVariableConfig = getUsersIdBookmarksRequestConfig(id = id, maxResults = maxResults, paginationToken = paginationToken, expansions = expansions, tweetFields = tweetFields, userFields = userFields, mediaFields = mediaFields, placeFields = placeFields, pollFields = pollFields)

        return request<Unit, GenericTweetsTimelineResponseEntity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getUsersIdBookmarks
    *
    * @param id The ID of the user for whom to return results 
    * @param maxResults The maximum number of results (optional)
    * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param tweetFields A comma separated list of Tweet fields to display. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @param mediaFields A comma separated list of Media fields to display. (optional)
    * @param placeFields A comma separated list of Place fields to display. (optional)
    * @param pollFields A comma separated list of Poll fields to display. (optional)
    * @return RequestConfig
    */
    fun getUsersIdBookmarksRequestConfig(id: kotlin.String, maxResults: kotlin.Int?, paginationToken: kotlin.String?, expansions: kotlin.collections.List<Expansions_getUsersIdBookmarks>?, tweetFields: kotlin.collections.List<TweetFields_getUsersIdBookmarks>?, userFields: kotlin.collections.List<UserFields_getUsersIdBookmarks>?, mediaFields: kotlin.collections.List<MediaFields_getUsersIdBookmarks>?, placeFields: kotlin.collections.List<PlaceFields_getUsersIdBookmarks>?, pollFields: kotlin.collections.List<PollFields_getUsersIdBookmarks>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (maxResults != null) {
                    put("max_results", listOf(maxResults.toString()))
                }
                if (paginationToken != null) {
                    put("pagination_token", listOf(paginationToken.toString()))
                }
                if (expansions != null) {
                    put("expansions", toMultiValue(expansions.toList(), "csv"))
                }
                if (tweetFields != null) {
                    put("tweet.fields", toMultiValue(tweetFields.toList(), "csv"))
                }
                if (userFields != null) {
                    put("user.fields", toMultiValue(userFields.toList(), "csv"))
                }
                if (mediaFields != null) {
                    put("media.fields", toMultiValue(mediaFields.toList(), "csv"))
                }
                if (placeFields != null) {
                    put("place.fields", toMultiValue(placeFields.toList(), "csv"))
                }
                if (pollFields != null) {
                    put("poll.fields", toMultiValue(pollFields.toList(), "csv"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/users/{id}/bookmarks".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Add Tweet to Bookmarks
    * Adds a Tweet (ID in the body) to the requesting user&#39;s (in the path) bookmarks
    * @param id The ID of the user for whom to add bookmarks 
    * @param addBookmarkRequestEntity  
    * @return BookmarkMutationResponseEntity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun postUsersIdBookmarks(id: kotlin.String, addBookmarkRequestEntity: AddBookmarkRequestEntity) : BookmarkMutationResponseEntity {
        val localVarResponse = postUsersIdBookmarksWithHttpInfo(id = id, addBookmarkRequestEntity = addBookmarkRequestEntity)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BookmarkMutationResponseEntity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Add Tweet to Bookmarks
    * Adds a Tweet (ID in the body) to the requesting user&#39;s (in the path) bookmarks
    * @param id The ID of the user for whom to add bookmarks 
    * @param addBookmarkRequestEntity  
    * @return ApiResponse<BookmarkMutationResponseEntity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun postUsersIdBookmarksWithHttpInfo(id: kotlin.String, addBookmarkRequestEntity: AddBookmarkRequestEntity) : ApiResponse<BookmarkMutationResponseEntity?> {
        val localVariableConfig = postUsersIdBookmarksRequestConfig(id = id, addBookmarkRequestEntity = addBookmarkRequestEntity)

        return request<AddBookmarkRequestEntity, BookmarkMutationResponseEntity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation postUsersIdBookmarks
    *
    * @param id The ID of the user for whom to add bookmarks 
    * @param addBookmarkRequestEntity  
    * @return RequestConfig
    */
    fun postUsersIdBookmarksRequestConfig(id: kotlin.String, addBookmarkRequestEntity: AddBookmarkRequestEntity) : RequestConfig<AddBookmarkRequestEntity> {
        val localVariableBody = addBookmarkRequestEntity
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/2/users/{id}/bookmarks".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Remove a bookmarked Tweet
    * Removes a Tweet from the requesting user&#39;s bookmarked Tweets.
    * @param id The ID of the user whose bookmark is to be removed. 
    * @param tweetId The ID of the tweet that the user is removing from bookmarks 
    * @return BookmarkMutationResponseEntity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usersIdBookmarksDelete(id: kotlin.String, tweetId: kotlin.String) : BookmarkMutationResponseEntity {
        val localVarResponse = usersIdBookmarksDeleteWithHttpInfo(id = id, tweetId = tweetId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BookmarkMutationResponseEntity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Remove a bookmarked Tweet
    * Removes a Tweet from the requesting user&#39;s bookmarked Tweets.
    * @param id The ID of the user whose bookmark is to be removed. 
    * @param tweetId The ID of the tweet that the user is removing from bookmarks 
    * @return ApiResponse<BookmarkMutationResponseEntity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usersIdBookmarksDeleteWithHttpInfo(id: kotlin.String, tweetId: kotlin.String) : ApiResponse<BookmarkMutationResponseEntity?> {
        val localVariableConfig = usersIdBookmarksDeleteRequestConfig(id = id, tweetId = tweetId)

        return request<Unit, BookmarkMutationResponseEntity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation usersIdBookmarksDelete
    *
    * @param id The ID of the user whose bookmark is to be removed. 
    * @param tweetId The ID of the tweet that the user is removing from bookmarks 
    * @return RequestConfig
    */
    fun usersIdBookmarksDeleteRequestConfig(id: kotlin.String, tweetId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/2/users/{id}/bookmarks/{tweet_id}".replace("{"+"id"+"}", "$id").replace("{"+"tweet_id"+"}", "$tweetId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
