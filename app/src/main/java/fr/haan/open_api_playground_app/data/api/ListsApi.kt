/**
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.42
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package fr.haan.open_api_playground_app.data.api

import java.io.IOException

import fr.haan.open_api_playground_app.data.entities.ErrorEntity
import fr.haan.open_api_playground_app.data.entities.ListAddMemberRequestEntity
import fr.haan.open_api_playground_app.data.entities.ListCreateRequestEntity
import fr.haan.open_api_playground_app.data.entities.ListCreateResponseEntity
import fr.haan.open_api_playground_app.data.entities.ListDeleteResponseEntity
import fr.haan.open_api_playground_app.data.entities.ListFollowRequestEntity
import fr.haan.open_api_playground_app.data.entities.ListFollowedResponseEntity
import fr.haan.open_api_playground_app.data.entities.ListMemberResponseEntity
import fr.haan.open_api_playground_app.data.entities.ListPinRequestEntity
import fr.haan.open_api_playground_app.data.entities.ListPinnedResponseEntity
import fr.haan.open_api_playground_app.data.entities.ListUpdateRequestEntity
import fr.haan.open_api_playground_app.data.entities.ListUpdateResponseEntity
import fr.haan.open_api_playground_app.data.entities.MultiListNoPaginationResponseEntity
import fr.haan.open_api_playground_app.data.entities.MultiListResponseEntity
import fr.haan.open_api_playground_app.data.entities.ProblemEntity
import fr.haan.open_api_playground_app.data.entities.SingleListLookupResponseEntity

import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class ListsApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.twitter.com")
        }
    }

    /**
     * enum for parameter listFields
     */
     enum class ListFields_getUserListMemberships(val value: kotlin.String) {
         @SerialName(value = "created_at") createdAt("created_at"),
         @SerialName(value = "description") description("description"),
         @SerialName(value = "follower_count") followerCount("follower_count"),
         @SerialName(value = "id") id("id"),
         @SerialName(value = "member_count") memberCount("member_count"),
         @SerialName(value = "name") name("name"),
         @SerialName(value = "owner_id") ownerId("owner_id"),
         @SerialName(value = "private") `private`("private"),
         ;
     }

    /**
     * enum for parameter expansions
     */
     enum class Expansions_getUserListMemberships(val value: kotlin.String) {
         @SerialName(value = "owner_id") ownerId("owner_id"),
         ;
     }

    /**
     * enum for parameter userFields
     */
     enum class UserFields_getUserListMemberships(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "created_at") createdAt("created_at"),
         @SerialName(value = "name") name("name"),
         @SerialName(value = "username") username("username"),
         @SerialName(value = "protected") `protected`("protected"),
         @SerialName(value = "verified") verified("verified"),
         @SerialName(value = "withheld") withheld("withheld"),
         @SerialName(value = "profile_image_url") profileImageUrl("profile_image_url"),
         @SerialName(value = "location") location("location"),
         @SerialName(value = "url") url("url"),
         @SerialName(value = "description") description("description"),
         @SerialName(value = "entities") entities("entities"),
         @SerialName(value = "pinned_tweet_id") pinnedTweetId("pinned_tweet_id"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         ;
     }

    /**
    * Get a User&#39;s List Memberships
    * Get a User&#39;s List Memberships.
    * @param id The ID of the user for whom to return results 
    * @param maxResults The maximum number of results (optional, default to 100)
    * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
    * @param listFields A comma separated list of List fields to display. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @return MultiListResponseEntity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getUserListMemberships(id: kotlin.String, maxResults: kotlin.Int?, paginationToken: kotlin.Long?, listFields: kotlin.collections.List<ListFields_getUserListMemberships>?, expansions: kotlin.collections.List<Expansions_getUserListMemberships>?, userFields: kotlin.collections.List<UserFields_getUserListMemberships>?) : MultiListResponseEntity {
        val localVarResponse = getUserListMembershipsWithHttpInfo(id = id, maxResults = maxResults, paginationToken = paginationToken, listFields = listFields, expansions = expansions, userFields = userFields)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MultiListResponseEntity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get a User&#39;s List Memberships
    * Get a User&#39;s List Memberships.
    * @param id The ID of the user for whom to return results 
    * @param maxResults The maximum number of results (optional, default to 100)
    * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
    * @param listFields A comma separated list of List fields to display. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @return ApiResponse<MultiListResponseEntity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getUserListMembershipsWithHttpInfo(id: kotlin.String, maxResults: kotlin.Int?, paginationToken: kotlin.Long?, listFields: kotlin.collections.List<ListFields_getUserListMemberships>?, expansions: kotlin.collections.List<Expansions_getUserListMemberships>?, userFields: kotlin.collections.List<UserFields_getUserListMemberships>?) : ApiResponse<MultiListResponseEntity?> {
        val localVariableConfig = getUserListMembershipsRequestConfig(id = id, maxResults = maxResults, paginationToken = paginationToken, listFields = listFields, expansions = expansions, userFields = userFields)

        return request<Unit, MultiListResponseEntity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getUserListMemberships
    *
    * @param id The ID of the user for whom to return results 
    * @param maxResults The maximum number of results (optional, default to 100)
    * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
    * @param listFields A comma separated list of List fields to display. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @return RequestConfig
    */
    fun getUserListMembershipsRequestConfig(id: kotlin.String, maxResults: kotlin.Int?, paginationToken: kotlin.Long?, listFields: kotlin.collections.List<ListFields_getUserListMemberships>?, expansions: kotlin.collections.List<Expansions_getUserListMemberships>?, userFields: kotlin.collections.List<UserFields_getUserListMemberships>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (maxResults != null) {
                    put("max_results", listOf(maxResults.toString()))
                }
                if (paginationToken != null) {
                    put("pagination_token", listOf(paginationToken.toString()))
                }
                if (listFields != null) {
                    put("list.fields", toMultiValue(listFields.toList(), "csv"))
                }
                if (expansions != null) {
                    put("expansions", toMultiValue(expansions.toList(), "csv"))
                }
                if (userFields != null) {
                    put("user.fields", toMultiValue(userFields.toList(), "csv"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/users/{id}/list_memberships".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Add a List member
    * Causes a user to become a member of a List.
    * @param id The ID of the List to add a member 
    * @param listAddMemberRequestEntity  (optional)
    * @return ListMemberResponseEntity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listAddMember(id: kotlin.String, listAddMemberRequestEntity: ListAddMemberRequestEntity?) : ListMemberResponseEntity {
        val localVarResponse = listAddMemberWithHttpInfo(id = id, listAddMemberRequestEntity = listAddMemberRequestEntity)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ListMemberResponseEntity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Add a List member
    * Causes a user to become a member of a List.
    * @param id The ID of the List to add a member 
    * @param listAddMemberRequestEntity  (optional)
    * @return ApiResponse<ListMemberResponseEntity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listAddMemberWithHttpInfo(id: kotlin.String, listAddMemberRequestEntity: ListAddMemberRequestEntity?) : ApiResponse<ListMemberResponseEntity?> {
        val localVariableConfig = listAddMemberRequestConfig(id = id, listAddMemberRequestEntity = listAddMemberRequestEntity)

        return request<ListAddMemberRequestEntity, ListMemberResponseEntity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation listAddMember
    *
    * @param id The ID of the List to add a member 
    * @param listAddMemberRequestEntity  (optional)
    * @return RequestConfig
    */
    fun listAddMemberRequestConfig(id: kotlin.String, listAddMemberRequestEntity: ListAddMemberRequestEntity?) : RequestConfig<ListAddMemberRequestEntity> {
        val localVariableBody = listAddMemberRequestEntity
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/2/lists/{id}/members".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Create List
    * Creates a new List.
    * @param listCreateRequestEntity  (optional)
    * @return ListCreateResponseEntity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listIdCreate(listCreateRequestEntity: ListCreateRequestEntity?) : ListCreateResponseEntity {
        val localVarResponse = listIdCreateWithHttpInfo(listCreateRequestEntity = listCreateRequestEntity)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ListCreateResponseEntity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Create List
    * Creates a new List.
    * @param listCreateRequestEntity  (optional)
    * @return ApiResponse<ListCreateResponseEntity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listIdCreateWithHttpInfo(listCreateRequestEntity: ListCreateRequestEntity?) : ApiResponse<ListCreateResponseEntity?> {
        val localVariableConfig = listIdCreateRequestConfig(listCreateRequestEntity = listCreateRequestEntity)

        return request<ListCreateRequestEntity, ListCreateResponseEntity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation listIdCreate
    *
    * @param listCreateRequestEntity  (optional)
    * @return RequestConfig
    */
    fun listIdCreateRequestConfig(listCreateRequestEntity: ListCreateRequestEntity?) : RequestConfig<ListCreateRequestEntity> {
        val localVariableBody = listCreateRequestEntity
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/2/lists",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Delete List
    * Delete a List that you own.
    * @param id The ID of the List to delete 
    * @return ListDeleteResponseEntity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listIdDelete(id: kotlin.String) : ListDeleteResponseEntity {
        val localVarResponse = listIdDeleteWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ListDeleteResponseEntity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Delete List
    * Delete a List that you own.
    * @param id The ID of the List to delete 
    * @return ApiResponse<ListDeleteResponseEntity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listIdDeleteWithHttpInfo(id: kotlin.String) : ApiResponse<ListDeleteResponseEntity?> {
        val localVariableConfig = listIdDeleteRequestConfig(id = id)

        return request<Unit, ListDeleteResponseEntity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation listIdDelete
    *
    * @param id The ID of the List to delete 
    * @return RequestConfig
    */
    fun listIdDeleteRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/2/lists/{id}".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter listFields
     */
     enum class ListFields_listIdGet(val value: kotlin.String) {
         @SerialName(value = "created_at") createdAt("created_at"),
         @SerialName(value = "description") description("description"),
         @SerialName(value = "follower_count") followerCount("follower_count"),
         @SerialName(value = "id") id("id"),
         @SerialName(value = "member_count") memberCount("member_count"),
         @SerialName(value = "name") name("name"),
         @SerialName(value = "owner_id") ownerId("owner_id"),
         @SerialName(value = "private") `private`("private"),
         ;
     }

    /**
     * enum for parameter expansions
     */
     enum class Expansions_listIdGet(val value: kotlin.String) {
         @SerialName(value = "owner_id") ownerId("owner_id"),
         ;
     }

    /**
     * enum for parameter userFields
     */
     enum class UserFields_listIdGet(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "created_at") createdAt("created_at"),
         @SerialName(value = "name") name("name"),
         @SerialName(value = "username") username("username"),
         @SerialName(value = "protected") `protected`("protected"),
         @SerialName(value = "verified") verified("verified"),
         @SerialName(value = "withheld") withheld("withheld"),
         @SerialName(value = "profile_image_url") profileImageUrl("profile_image_url"),
         @SerialName(value = "location") location("location"),
         @SerialName(value = "url") url("url"),
         @SerialName(value = "description") description("description"),
         @SerialName(value = "entities") entities("entities"),
         @SerialName(value = "pinned_tweet_id") pinnedTweetId("pinned_tweet_id"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         ;
     }

    /**
    * List lookup by List ID
    * Returns a List
    * @param id The ID of the List to get 
    * @param listFields A comma separated list of List fields to display. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @return SingleListLookupResponseEntity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listIdGet(id: kotlin.String, listFields: kotlin.collections.List<ListFields_listIdGet>?, expansions: kotlin.collections.List<Expansions_listIdGet>?, userFields: kotlin.collections.List<UserFields_listIdGet>?) : SingleListLookupResponseEntity {
        val localVarResponse = listIdGetWithHttpInfo(id = id, listFields = listFields, expansions = expansions, userFields = userFields)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SingleListLookupResponseEntity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * List lookup by List ID
    * Returns a List
    * @param id The ID of the List to get 
    * @param listFields A comma separated list of List fields to display. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @return ApiResponse<SingleListLookupResponseEntity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listIdGetWithHttpInfo(id: kotlin.String, listFields: kotlin.collections.List<ListFields_listIdGet>?, expansions: kotlin.collections.List<Expansions_listIdGet>?, userFields: kotlin.collections.List<UserFields_listIdGet>?) : ApiResponse<SingleListLookupResponseEntity?> {
        val localVariableConfig = listIdGetRequestConfig(id = id, listFields = listFields, expansions = expansions, userFields = userFields)

        return request<Unit, SingleListLookupResponseEntity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation listIdGet
    *
    * @param id The ID of the List to get 
    * @param listFields A comma separated list of List fields to display. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @return RequestConfig
    */
    fun listIdGetRequestConfig(id: kotlin.String, listFields: kotlin.collections.List<ListFields_listIdGet>?, expansions: kotlin.collections.List<Expansions_listIdGet>?, userFields: kotlin.collections.List<UserFields_listIdGet>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (listFields != null) {
                    put("list.fields", toMultiValue(listFields.toList(), "csv"))
                }
                if (expansions != null) {
                    put("expansions", toMultiValue(expansions.toList(), "csv"))
                }
                if (userFields != null) {
                    put("user.fields", toMultiValue(userFields.toList(), "csv"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/lists/{id}".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Update List
    * Update a List that you own.
    * @param id The ID of the List to modify 
    * @param listUpdateRequestEntity  (optional)
    * @return ListUpdateResponseEntity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listIdUpdate(id: kotlin.String, listUpdateRequestEntity: ListUpdateRequestEntity?) : ListUpdateResponseEntity {
        val localVarResponse = listIdUpdateWithHttpInfo(id = id, listUpdateRequestEntity = listUpdateRequestEntity)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ListUpdateResponseEntity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Update List
    * Update a List that you own.
    * @param id The ID of the List to modify 
    * @param listUpdateRequestEntity  (optional)
    * @return ApiResponse<ListUpdateResponseEntity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listIdUpdateWithHttpInfo(id: kotlin.String, listUpdateRequestEntity: ListUpdateRequestEntity?) : ApiResponse<ListUpdateResponseEntity?> {
        val localVariableConfig = listIdUpdateRequestConfig(id = id, listUpdateRequestEntity = listUpdateRequestEntity)

        return request<ListUpdateRequestEntity, ListUpdateResponseEntity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation listIdUpdate
    *
    * @param id The ID of the List to modify 
    * @param listUpdateRequestEntity  (optional)
    * @return RequestConfig
    */
    fun listIdUpdateRequestConfig(id: kotlin.String, listUpdateRequestEntity: ListUpdateRequestEntity?) : RequestConfig<ListUpdateRequestEntity> {
        val localVariableBody = listUpdateRequestEntity
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/2/lists/{id}".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Remove a List member
    * Causes a user to be removed from the members of a List.
    * @param id The ID of the List to remove a member 
    * @param userId The ID of user that will be removed from the List 
    * @return ListMemberResponseEntity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listRemoveMember(id: kotlin.String, userId: kotlin.String) : ListMemberResponseEntity {
        val localVarResponse = listRemoveMemberWithHttpInfo(id = id, userId = userId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ListMemberResponseEntity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Remove a List member
    * Causes a user to be removed from the members of a List.
    * @param id The ID of the List to remove a member 
    * @param userId The ID of user that will be removed from the List 
    * @return ApiResponse<ListMemberResponseEntity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listRemoveMemberWithHttpInfo(id: kotlin.String, userId: kotlin.String) : ApiResponse<ListMemberResponseEntity?> {
        val localVariableConfig = listRemoveMemberRequestConfig(id = id, userId = userId)

        return request<Unit, ListMemberResponseEntity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation listRemoveMember
    *
    * @param id The ID of the List to remove a member 
    * @param userId The ID of user that will be removed from the List 
    * @return RequestConfig
    */
    fun listRemoveMemberRequestConfig(id: kotlin.String, userId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/2/lists/{id}/members/{user_id}".replace("{"+"id"+"}", "$id").replace("{"+"user_id"+"}", "$userId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Follow a List
    * Causes a user to follow a List.
    * @param id The ID of the authenticated source user that will follow the List 
    * @param listFollowRequestEntity  (optional)
    * @return ListFollowedResponseEntity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listUserFollow(id: kotlin.String, listFollowRequestEntity: ListFollowRequestEntity?) : ListFollowedResponseEntity {
        val localVarResponse = listUserFollowWithHttpInfo(id = id, listFollowRequestEntity = listFollowRequestEntity)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ListFollowedResponseEntity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Follow a List
    * Causes a user to follow a List.
    * @param id The ID of the authenticated source user that will follow the List 
    * @param listFollowRequestEntity  (optional)
    * @return ApiResponse<ListFollowedResponseEntity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listUserFollowWithHttpInfo(id: kotlin.String, listFollowRequestEntity: ListFollowRequestEntity?) : ApiResponse<ListFollowedResponseEntity?> {
        val localVariableConfig = listUserFollowRequestConfig(id = id, listFollowRequestEntity = listFollowRequestEntity)

        return request<ListFollowRequestEntity, ListFollowedResponseEntity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation listUserFollow
    *
    * @param id The ID of the authenticated source user that will follow the List 
    * @param listFollowRequestEntity  (optional)
    * @return RequestConfig
    */
    fun listUserFollowRequestConfig(id: kotlin.String, listFollowRequestEntity: ListFollowRequestEntity?) : RequestConfig<ListFollowRequestEntity> {
        val localVariableBody = listFollowRequestEntity
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/2/users/{id}/followed_lists".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter listFields
     */
     enum class ListFields_listUserOwnedLists(val value: kotlin.String) {
         @SerialName(value = "created_at") createdAt("created_at"),
         @SerialName(value = "description") description("description"),
         @SerialName(value = "follower_count") followerCount("follower_count"),
         @SerialName(value = "id") id("id"),
         @SerialName(value = "member_count") memberCount("member_count"),
         @SerialName(value = "name") name("name"),
         @SerialName(value = "owner_id") ownerId("owner_id"),
         @SerialName(value = "private") `private`("private"),
         ;
     }

    /**
     * enum for parameter expansions
     */
     enum class Expansions_listUserOwnedLists(val value: kotlin.String) {
         @SerialName(value = "owner_id") ownerId("owner_id"),
         ;
     }

    /**
     * enum for parameter userFields
     */
     enum class UserFields_listUserOwnedLists(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "created_at") createdAt("created_at"),
         @SerialName(value = "name") name("name"),
         @SerialName(value = "username") username("username"),
         @SerialName(value = "protected") `protected`("protected"),
         @SerialName(value = "verified") verified("verified"),
         @SerialName(value = "withheld") withheld("withheld"),
         @SerialName(value = "profile_image_url") profileImageUrl("profile_image_url"),
         @SerialName(value = "location") location("location"),
         @SerialName(value = "url") url("url"),
         @SerialName(value = "description") description("description"),
         @SerialName(value = "entities") entities("entities"),
         @SerialName(value = "pinned_tweet_id") pinnedTweetId("pinned_tweet_id"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         ;
     }

    /**
    * Get a User&#39;s Owned Lists
    * Get a User&#39;s Owned Lists.
    * @param id The ID of the user for whom to return results 
    * @param maxResults The maximum number of results (optional, default to 100)
    * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
    * @param listFields A comma separated list of List fields to display. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @return MultiListResponseEntity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listUserOwnedLists(id: kotlin.String, maxResults: kotlin.Int?, paginationToken: kotlin.Long?, listFields: kotlin.collections.List<ListFields_listUserOwnedLists>?, expansions: kotlin.collections.List<Expansions_listUserOwnedLists>?, userFields: kotlin.collections.List<UserFields_listUserOwnedLists>?) : MultiListResponseEntity {
        val localVarResponse = listUserOwnedListsWithHttpInfo(id = id, maxResults = maxResults, paginationToken = paginationToken, listFields = listFields, expansions = expansions, userFields = userFields)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MultiListResponseEntity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get a User&#39;s Owned Lists
    * Get a User&#39;s Owned Lists.
    * @param id The ID of the user for whom to return results 
    * @param maxResults The maximum number of results (optional, default to 100)
    * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
    * @param listFields A comma separated list of List fields to display. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @return ApiResponse<MultiListResponseEntity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listUserOwnedListsWithHttpInfo(id: kotlin.String, maxResults: kotlin.Int?, paginationToken: kotlin.Long?, listFields: kotlin.collections.List<ListFields_listUserOwnedLists>?, expansions: kotlin.collections.List<Expansions_listUserOwnedLists>?, userFields: kotlin.collections.List<UserFields_listUserOwnedLists>?) : ApiResponse<MultiListResponseEntity?> {
        val localVariableConfig = listUserOwnedListsRequestConfig(id = id, maxResults = maxResults, paginationToken = paginationToken, listFields = listFields, expansions = expansions, userFields = userFields)

        return request<Unit, MultiListResponseEntity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation listUserOwnedLists
    *
    * @param id The ID of the user for whom to return results 
    * @param maxResults The maximum number of results (optional, default to 100)
    * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
    * @param listFields A comma separated list of List fields to display. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @return RequestConfig
    */
    fun listUserOwnedListsRequestConfig(id: kotlin.String, maxResults: kotlin.Int?, paginationToken: kotlin.Long?, listFields: kotlin.collections.List<ListFields_listUserOwnedLists>?, expansions: kotlin.collections.List<Expansions_listUserOwnedLists>?, userFields: kotlin.collections.List<UserFields_listUserOwnedLists>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (maxResults != null) {
                    put("max_results", listOf(maxResults.toString()))
                }
                if (paginationToken != null) {
                    put("pagination_token", listOf(paginationToken.toString()))
                }
                if (listFields != null) {
                    put("list.fields", toMultiValue(listFields.toList(), "csv"))
                }
                if (expansions != null) {
                    put("expansions", toMultiValue(expansions.toList(), "csv"))
                }
                if (userFields != null) {
                    put("user.fields", toMultiValue(userFields.toList(), "csv"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/users/{id}/owned_lists".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Pin a List
    * Causes a user to pin a List.
    * @param id The ID of the authenticated source user that will pin the List 
    * @param listPinRequestEntity  (optional)
    * @return ListPinnedResponseEntity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listUserPin(id: kotlin.String, listPinRequestEntity: ListPinRequestEntity?) : ListPinnedResponseEntity {
        val localVarResponse = listUserPinWithHttpInfo(id = id, listPinRequestEntity = listPinRequestEntity)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ListPinnedResponseEntity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Pin a List
    * Causes a user to pin a List.
    * @param id The ID of the authenticated source user that will pin the List 
    * @param listPinRequestEntity  (optional)
    * @return ApiResponse<ListPinnedResponseEntity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listUserPinWithHttpInfo(id: kotlin.String, listPinRequestEntity: ListPinRequestEntity?) : ApiResponse<ListPinnedResponseEntity?> {
        val localVariableConfig = listUserPinRequestConfig(id = id, listPinRequestEntity = listPinRequestEntity)

        return request<ListPinRequestEntity, ListPinnedResponseEntity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation listUserPin
    *
    * @param id The ID of the authenticated source user that will pin the List 
    * @param listPinRequestEntity  (optional)
    * @return RequestConfig
    */
    fun listUserPinRequestConfig(id: kotlin.String, listPinRequestEntity: ListPinRequestEntity?) : RequestConfig<ListPinRequestEntity> {
        val localVariableBody = listPinRequestEntity
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/2/users/{id}/pinned_lists".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter listFields
     */
     enum class ListFields_listUserPinnedLists(val value: kotlin.String) {
         @SerialName(value = "created_at") createdAt("created_at"),
         @SerialName(value = "description") description("description"),
         @SerialName(value = "follower_count") followerCount("follower_count"),
         @SerialName(value = "id") id("id"),
         @SerialName(value = "member_count") memberCount("member_count"),
         @SerialName(value = "name") name("name"),
         @SerialName(value = "owner_id") ownerId("owner_id"),
         @SerialName(value = "private") `private`("private"),
         ;
     }

    /**
     * enum for parameter expansions
     */
     enum class Expansions_listUserPinnedLists(val value: kotlin.String) {
         @SerialName(value = "owner_id") ownerId("owner_id"),
         ;
     }

    /**
     * enum for parameter userFields
     */
     enum class UserFields_listUserPinnedLists(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "created_at") createdAt("created_at"),
         @SerialName(value = "name") name("name"),
         @SerialName(value = "username") username("username"),
         @SerialName(value = "protected") `protected`("protected"),
         @SerialName(value = "verified") verified("verified"),
         @SerialName(value = "withheld") withheld("withheld"),
         @SerialName(value = "profile_image_url") profileImageUrl("profile_image_url"),
         @SerialName(value = "location") location("location"),
         @SerialName(value = "url") url("url"),
         @SerialName(value = "description") description("description"),
         @SerialName(value = "entities") entities("entities"),
         @SerialName(value = "pinned_tweet_id") pinnedTweetId("pinned_tweet_id"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         ;
     }

    /**
    * Get a User&#39;s Pinned Lists
    * Get a User&#39;s Pinned Lists.
    * @param id The ID of the user for whom to return results 
    * @param listFields A comma separated list of List fields to display. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @return MultiListNoPaginationResponseEntity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listUserPinnedLists(id: kotlin.String, listFields: kotlin.collections.List<ListFields_listUserPinnedLists>?, expansions: kotlin.collections.List<Expansions_listUserPinnedLists>?, userFields: kotlin.collections.List<UserFields_listUserPinnedLists>?) : MultiListNoPaginationResponseEntity {
        val localVarResponse = listUserPinnedListsWithHttpInfo(id = id, listFields = listFields, expansions = expansions, userFields = userFields)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MultiListNoPaginationResponseEntity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get a User&#39;s Pinned Lists
    * Get a User&#39;s Pinned Lists.
    * @param id The ID of the user for whom to return results 
    * @param listFields A comma separated list of List fields to display. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @return ApiResponse<MultiListNoPaginationResponseEntity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listUserPinnedListsWithHttpInfo(id: kotlin.String, listFields: kotlin.collections.List<ListFields_listUserPinnedLists>?, expansions: kotlin.collections.List<Expansions_listUserPinnedLists>?, userFields: kotlin.collections.List<UserFields_listUserPinnedLists>?) : ApiResponse<MultiListNoPaginationResponseEntity?> {
        val localVariableConfig = listUserPinnedListsRequestConfig(id = id, listFields = listFields, expansions = expansions, userFields = userFields)

        return request<Unit, MultiListNoPaginationResponseEntity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation listUserPinnedLists
    *
    * @param id The ID of the user for whom to return results 
    * @param listFields A comma separated list of List fields to display. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @return RequestConfig
    */
    fun listUserPinnedListsRequestConfig(id: kotlin.String, listFields: kotlin.collections.List<ListFields_listUserPinnedLists>?, expansions: kotlin.collections.List<Expansions_listUserPinnedLists>?, userFields: kotlin.collections.List<UserFields_listUserPinnedLists>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (listFields != null) {
                    put("list.fields", toMultiValue(listFields.toList(), "csv"))
                }
                if (expansions != null) {
                    put("expansions", toMultiValue(expansions.toList(), "csv"))
                }
                if (userFields != null) {
                    put("user.fields", toMultiValue(userFields.toList(), "csv"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/users/{id}/pinned_lists".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Unfollow a List
    * Causes a user to unfollow a List.
    * @param id The ID of the authenticated source user that will unfollow the List 
    * @param listId The ID of the List to unfollow 
    * @return ListFollowedResponseEntity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listUserUnfollow(id: kotlin.String, listId: kotlin.String) : ListFollowedResponseEntity {
        val localVarResponse = listUserUnfollowWithHttpInfo(id = id, listId = listId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ListFollowedResponseEntity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Unfollow a List
    * Causes a user to unfollow a List.
    * @param id The ID of the authenticated source user that will unfollow the List 
    * @param listId The ID of the List to unfollow 
    * @return ApiResponse<ListFollowedResponseEntity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listUserUnfollowWithHttpInfo(id: kotlin.String, listId: kotlin.String) : ApiResponse<ListFollowedResponseEntity?> {
        val localVariableConfig = listUserUnfollowRequestConfig(id = id, listId = listId)

        return request<Unit, ListFollowedResponseEntity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation listUserUnfollow
    *
    * @param id The ID of the authenticated source user that will unfollow the List 
    * @param listId The ID of the List to unfollow 
    * @return RequestConfig
    */
    fun listUserUnfollowRequestConfig(id: kotlin.String, listId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/2/users/{id}/followed_lists/{list_id}".replace("{"+"id"+"}", "$id").replace("{"+"list_id"+"}", "$listId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Unpin a List
    * Causes a user to remove a pinned List.
    * @param id The ID of the authenticated source user that will remove the pinned List 
    * @param listId The ID of the List to unpin 
    * @return ListPinnedResponseEntity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listUserUnpin(id: kotlin.String, listId: kotlin.String) : ListPinnedResponseEntity {
        val localVarResponse = listUserUnpinWithHttpInfo(id = id, listId = listId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ListPinnedResponseEntity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Unpin a List
    * Causes a user to remove a pinned List.
    * @param id The ID of the authenticated source user that will remove the pinned List 
    * @param listId The ID of the List to unpin 
    * @return ApiResponse<ListPinnedResponseEntity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listUserUnpinWithHttpInfo(id: kotlin.String, listId: kotlin.String) : ApiResponse<ListPinnedResponseEntity?> {
        val localVariableConfig = listUserUnpinRequestConfig(id = id, listId = listId)

        return request<Unit, ListPinnedResponseEntity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation listUserUnpin
    *
    * @param id The ID of the authenticated source user that will remove the pinned List 
    * @param listId The ID of the List to unpin 
    * @return RequestConfig
    */
    fun listUserUnpinRequestConfig(id: kotlin.String, listId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/2/users/{id}/pinned_lists/{list_id}".replace("{"+"id"+"}", "$id").replace("{"+"list_id"+"}", "$listId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter listFields
     */
     enum class ListFields_userFollowedLists(val value: kotlin.String) {
         @SerialName(value = "created_at") createdAt("created_at"),
         @SerialName(value = "description") description("description"),
         @SerialName(value = "follower_count") followerCount("follower_count"),
         @SerialName(value = "id") id("id"),
         @SerialName(value = "member_count") memberCount("member_count"),
         @SerialName(value = "name") name("name"),
         @SerialName(value = "owner_id") ownerId("owner_id"),
         @SerialName(value = "private") `private`("private"),
         ;
     }

    /**
     * enum for parameter expansions
     */
     enum class Expansions_userFollowedLists(val value: kotlin.String) {
         @SerialName(value = "owner_id") ownerId("owner_id"),
         ;
     }

    /**
     * enum for parameter userFields
     */
     enum class UserFields_userFollowedLists(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "created_at") createdAt("created_at"),
         @SerialName(value = "name") name("name"),
         @SerialName(value = "username") username("username"),
         @SerialName(value = "protected") `protected`("protected"),
         @SerialName(value = "verified") verified("verified"),
         @SerialName(value = "withheld") withheld("withheld"),
         @SerialName(value = "profile_image_url") profileImageUrl("profile_image_url"),
         @SerialName(value = "location") location("location"),
         @SerialName(value = "url") url("url"),
         @SerialName(value = "description") description("description"),
         @SerialName(value = "entities") entities("entities"),
         @SerialName(value = "pinned_tweet_id") pinnedTweetId("pinned_tweet_id"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         ;
     }

    /**
    * Get User&#39;s Followed Lists
    * Returns a user&#39;s followed Lists.
    * @param id The ID of the user for whom to return results 
    * @param maxResults The maximum number of results (optional, default to 100)
    * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
    * @param listFields A comma separated list of List fields to display. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @return MultiListResponseEntity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun userFollowedLists(id: kotlin.String, maxResults: kotlin.Int?, paginationToken: kotlin.Long?, listFields: kotlin.collections.List<ListFields_userFollowedLists>?, expansions: kotlin.collections.List<Expansions_userFollowedLists>?, userFields: kotlin.collections.List<UserFields_userFollowedLists>?) : MultiListResponseEntity {
        val localVarResponse = userFollowedListsWithHttpInfo(id = id, maxResults = maxResults, paginationToken = paginationToken, listFields = listFields, expansions = expansions, userFields = userFields)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MultiListResponseEntity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get User&#39;s Followed Lists
    * Returns a user&#39;s followed Lists.
    * @param id The ID of the user for whom to return results 
    * @param maxResults The maximum number of results (optional, default to 100)
    * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
    * @param listFields A comma separated list of List fields to display. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @return ApiResponse<MultiListResponseEntity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun userFollowedListsWithHttpInfo(id: kotlin.String, maxResults: kotlin.Int?, paginationToken: kotlin.Long?, listFields: kotlin.collections.List<ListFields_userFollowedLists>?, expansions: kotlin.collections.List<Expansions_userFollowedLists>?, userFields: kotlin.collections.List<UserFields_userFollowedLists>?) : ApiResponse<MultiListResponseEntity?> {
        val localVariableConfig = userFollowedListsRequestConfig(id = id, maxResults = maxResults, paginationToken = paginationToken, listFields = listFields, expansions = expansions, userFields = userFields)

        return request<Unit, MultiListResponseEntity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation userFollowedLists
    *
    * @param id The ID of the user for whom to return results 
    * @param maxResults The maximum number of results (optional, default to 100)
    * @param paginationToken This parameter is used to get a specified &#39;page&#39; of results. (optional)
    * @param listFields A comma separated list of List fields to display. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @return RequestConfig
    */
    fun userFollowedListsRequestConfig(id: kotlin.String, maxResults: kotlin.Int?, paginationToken: kotlin.Long?, listFields: kotlin.collections.List<ListFields_userFollowedLists>?, expansions: kotlin.collections.List<Expansions_userFollowedLists>?, userFields: kotlin.collections.List<UserFields_userFollowedLists>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (maxResults != null) {
                    put("max_results", listOf(maxResults.toString()))
                }
                if (paginationToken != null) {
                    put("pagination_token", listOf(paginationToken.toString()))
                }
                if (listFields != null) {
                    put("list.fields", toMultiValue(listFields.toList(), "csv"))
                }
                if (expansions != null) {
                    put("expansions", toMultiValue(expansions.toList(), "csv"))
                }
                if (userFields != null) {
                    put("user.fields", toMultiValue(userFields.toList(), "csv"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/users/{id}/followed_lists".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
