/**
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.42
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package fr.haan.open_api_playground_app.data.api

import java.io.IOException

import fr.haan.open_api_playground_app.data.entities.ErrorEntity
import fr.haan.open_api_playground_app.data.entities.MultiSpaceLookupResponseEntity
import fr.haan.open_api_playground_app.data.entities.MultiTweetLookupResponseEntity
import fr.haan.open_api_playground_app.data.entities.MultiUserLookupResponseEntity
import fr.haan.open_api_playground_app.data.entities.ProblemEntity
import fr.haan.open_api_playground_app.data.entities.SingleSpaceLookupResponseEntity

import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class SpacesApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.twitter.com")
        }
    }

    /**
     * enum for parameter spaceFields
     */
     enum class SpaceFields_findSpaceById(val value: kotlin.String) {
         @SerialName(value = "created_at") createdAt("created_at"),
         @SerialName(value = "creator_id") creatorId("creator_id"),
         @SerialName(value = "host_ids") hostIds("host_ids"),
         @SerialName(value = "invited_user_ids") invitedUserIds("invited_user_ids"),
         @SerialName(value = "is_ticketed") isTicketed("is_ticketed"),
         @SerialName(value = "lang") lang("lang"),
         @SerialName(value = "participant_count") participantCount("participant_count"),
         @SerialName(value = "scheduled_start") scheduledStart("scheduled_start"),
         @SerialName(value = "speaker_ids") speakerIds("speaker_ids"),
         @SerialName(value = "started_at") startedAt("started_at"),
         @SerialName(value = "title") title("title"),
         @SerialName(value = "updated_at") updatedAt("updated_at"),
         ;
     }

    /**
     * enum for parameter expansions
     */
     enum class Expansions_findSpaceById(val value: kotlin.String) {
         @SerialName(value = "creator_id") creatorId("creator_id"),
         @SerialName(value = "host_ids") hostIds("host_ids"),
         @SerialName(value = "invited_user_ids") invitedUserIds("invited_user_ids"),
         @SerialName(value = "speaker_ids") speakerIds("speaker_ids"),
         ;
     }

    /**
    * Space lookup by Space ID
    * Returns a variety of information about the Space specified by the requested ID
    * @param id The space id to be retrieved 
    * @param spaceFields A comma separated list of Space fields to display. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @return SingleSpaceLookupResponseEntity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun findSpaceById(id: kotlin.String, spaceFields: kotlin.collections.List<SpaceFields_findSpaceById>?, expansions: kotlin.collections.List<Expansions_findSpaceById>?) : SingleSpaceLookupResponseEntity {
        val localVarResponse = findSpaceByIdWithHttpInfo(id = id, spaceFields = spaceFields, expansions = expansions)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SingleSpaceLookupResponseEntity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Space lookup by Space ID
    * Returns a variety of information about the Space specified by the requested ID
    * @param id The space id to be retrieved 
    * @param spaceFields A comma separated list of Space fields to display. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @return ApiResponse<SingleSpaceLookupResponseEntity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun findSpaceByIdWithHttpInfo(id: kotlin.String, spaceFields: kotlin.collections.List<SpaceFields_findSpaceById>?, expansions: kotlin.collections.List<Expansions_findSpaceById>?) : ApiResponse<SingleSpaceLookupResponseEntity?> {
        val localVariableConfig = findSpaceByIdRequestConfig(id = id, spaceFields = spaceFields, expansions = expansions)

        return request<Unit, SingleSpaceLookupResponseEntity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation findSpaceById
    *
    * @param id The space id to be retrieved 
    * @param spaceFields A comma separated list of Space fields to display. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @return RequestConfig
    */
    fun findSpaceByIdRequestConfig(id: kotlin.String, spaceFields: kotlin.collections.List<SpaceFields_findSpaceById>?, expansions: kotlin.collections.List<Expansions_findSpaceById>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (spaceFields != null) {
                    put("space.fields", toMultiValue(spaceFields.toList(), "csv"))
                }
                if (expansions != null) {
                    put("expansions", toMultiValue(expansions.toList(), "csv"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/spaces/{id}".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter spaceFields
     */
     enum class SpaceFields_findSpacesByCreatorIds(val value: kotlin.String) {
         @SerialName(value = "created_at") createdAt("created_at"),
         @SerialName(value = "creator_id") creatorId("creator_id"),
         @SerialName(value = "host_ids") hostIds("host_ids"),
         @SerialName(value = "invited_user_ids") invitedUserIds("invited_user_ids"),
         @SerialName(value = "is_ticketed") isTicketed("is_ticketed"),
         @SerialName(value = "lang") lang("lang"),
         @SerialName(value = "participant_count") participantCount("participant_count"),
         @SerialName(value = "scheduled_start") scheduledStart("scheduled_start"),
         @SerialName(value = "speaker_ids") speakerIds("speaker_ids"),
         @SerialName(value = "started_at") startedAt("started_at"),
         @SerialName(value = "title") title("title"),
         @SerialName(value = "updated_at") updatedAt("updated_at"),
         ;
     }

    /**
     * enum for parameter expansions
     */
     enum class Expansions_findSpacesByCreatorIds(val value: kotlin.String) {
         @SerialName(value = "creator_id") creatorId("creator_id"),
         @SerialName(value = "host_ids") hostIds("host_ids"),
         @SerialName(value = "invited_user_ids") invitedUserIds("invited_user_ids"),
         @SerialName(value = "speaker_ids") speakerIds("speaker_ids"),
         ;
     }

    /**
    * Space lookup by their creators
    * Returns a variety of information about the Spaces created by the provided User IDs
    * @param userIds The users to search through 
    * @param spaceFields A comma separated list of Space fields to display. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @return MultiSpaceLookupResponseEntity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun findSpacesByCreatorIds(userIds: kotlin.collections.List<kotlin.String>, spaceFields: kotlin.collections.List<SpaceFields_findSpacesByCreatorIds>?, expansions: kotlin.collections.List<Expansions_findSpacesByCreatorIds>?) : MultiSpaceLookupResponseEntity {
        val localVarResponse = findSpacesByCreatorIdsWithHttpInfo(userIds = userIds, spaceFields = spaceFields, expansions = expansions)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MultiSpaceLookupResponseEntity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Space lookup by their creators
    * Returns a variety of information about the Spaces created by the provided User IDs
    * @param userIds The users to search through 
    * @param spaceFields A comma separated list of Space fields to display. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @return ApiResponse<MultiSpaceLookupResponseEntity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun findSpacesByCreatorIdsWithHttpInfo(userIds: kotlin.collections.List<kotlin.String>, spaceFields: kotlin.collections.List<SpaceFields_findSpacesByCreatorIds>?, expansions: kotlin.collections.List<Expansions_findSpacesByCreatorIds>?) : ApiResponse<MultiSpaceLookupResponseEntity?> {
        val localVariableConfig = findSpacesByCreatorIdsRequestConfig(userIds = userIds, spaceFields = spaceFields, expansions = expansions)

        return request<Unit, MultiSpaceLookupResponseEntity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation findSpacesByCreatorIds
    *
    * @param userIds The users to search through 
    * @param spaceFields A comma separated list of Space fields to display. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @return RequestConfig
    */
    fun findSpacesByCreatorIdsRequestConfig(userIds: kotlin.collections.List<kotlin.String>, spaceFields: kotlin.collections.List<SpaceFields_findSpacesByCreatorIds>?, expansions: kotlin.collections.List<Expansions_findSpacesByCreatorIds>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("user_ids", toMultiValue(userIds.toList(), "multi"))
                if (spaceFields != null) {
                    put("space.fields", toMultiValue(spaceFields.toList(), "csv"))
                }
                if (expansions != null) {
                    put("expansions", toMultiValue(expansions.toList(), "csv"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/spaces/by/creator_ids",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter spaceFields
     */
     enum class SpaceFields_findSpacesByIds(val value: kotlin.String) {
         @SerialName(value = "created_at") createdAt("created_at"),
         @SerialName(value = "creator_id") creatorId("creator_id"),
         @SerialName(value = "host_ids") hostIds("host_ids"),
         @SerialName(value = "invited_user_ids") invitedUserIds("invited_user_ids"),
         @SerialName(value = "is_ticketed") isTicketed("is_ticketed"),
         @SerialName(value = "lang") lang("lang"),
         @SerialName(value = "participant_count") participantCount("participant_count"),
         @SerialName(value = "scheduled_start") scheduledStart("scheduled_start"),
         @SerialName(value = "speaker_ids") speakerIds("speaker_ids"),
         @SerialName(value = "started_at") startedAt("started_at"),
         @SerialName(value = "title") title("title"),
         @SerialName(value = "updated_at") updatedAt("updated_at"),
         ;
     }

    /**
     * enum for parameter expansions
     */
     enum class Expansions_findSpacesByIds(val value: kotlin.String) {
         @SerialName(value = "creator_id") creatorId("creator_id"),
         @SerialName(value = "host_ids") hostIds("host_ids"),
         @SerialName(value = "invited_user_ids") invitedUserIds("invited_user_ids"),
         @SerialName(value = "speaker_ids") speakerIds("speaker_ids"),
         ;
     }

    /**
    * Space lookup up Space IDs
    * Returns a variety of information about the Spaces specified by the requested IDs
    * @param ids A list of space ids 
    * @param spaceFields A comma separated list of Space fields to display. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @return MultiSpaceLookupResponseEntity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun findSpacesByIds(ids: kotlin.collections.List<kotlin.String>, spaceFields: kotlin.collections.List<SpaceFields_findSpacesByIds>?, expansions: kotlin.collections.List<Expansions_findSpacesByIds>?) : MultiSpaceLookupResponseEntity {
        val localVarResponse = findSpacesByIdsWithHttpInfo(ids = ids, spaceFields = spaceFields, expansions = expansions)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MultiSpaceLookupResponseEntity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Space lookup up Space IDs
    * Returns a variety of information about the Spaces specified by the requested IDs
    * @param ids A list of space ids 
    * @param spaceFields A comma separated list of Space fields to display. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @return ApiResponse<MultiSpaceLookupResponseEntity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun findSpacesByIdsWithHttpInfo(ids: kotlin.collections.List<kotlin.String>, spaceFields: kotlin.collections.List<SpaceFields_findSpacesByIds>?, expansions: kotlin.collections.List<Expansions_findSpacesByIds>?) : ApiResponse<MultiSpaceLookupResponseEntity?> {
        val localVariableConfig = findSpacesByIdsRequestConfig(ids = ids, spaceFields = spaceFields, expansions = expansions)

        return request<Unit, MultiSpaceLookupResponseEntity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation findSpacesByIds
    *
    * @param ids A list of space ids 
    * @param spaceFields A comma separated list of Space fields to display. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @return RequestConfig
    */
    fun findSpacesByIdsRequestConfig(ids: kotlin.collections.List<kotlin.String>, spaceFields: kotlin.collections.List<SpaceFields_findSpacesByIds>?, expansions: kotlin.collections.List<Expansions_findSpacesByIds>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("ids", toMultiValue(ids.toList(), "multi"))
                if (spaceFields != null) {
                    put("space.fields", toMultiValue(spaceFields.toList(), "csv"))
                }
                if (expansions != null) {
                    put("expansions", toMultiValue(expansions.toList(), "csv"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/spaces",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter state
     */
     enum class State_searchSpaces(val value: kotlin.String) {
         @SerialName(value = "live") live("live"),
         @SerialName(value = "scheduled") scheduled("scheduled"),
         @SerialName(value = "all") all("all"),
         ;
     }

    /**
     * enum for parameter spaceFields
     */
     enum class SpaceFields_searchSpaces(val value: kotlin.String) {
         @SerialName(value = "created_at") createdAt("created_at"),
         @SerialName(value = "creator_id") creatorId("creator_id"),
         @SerialName(value = "host_ids") hostIds("host_ids"),
         @SerialName(value = "invited_user_ids") invitedUserIds("invited_user_ids"),
         @SerialName(value = "is_ticketed") isTicketed("is_ticketed"),
         @SerialName(value = "lang") lang("lang"),
         @SerialName(value = "participant_count") participantCount("participant_count"),
         @SerialName(value = "scheduled_start") scheduledStart("scheduled_start"),
         @SerialName(value = "speaker_ids") speakerIds("speaker_ids"),
         @SerialName(value = "started_at") startedAt("started_at"),
         @SerialName(value = "title") title("title"),
         @SerialName(value = "updated_at") updatedAt("updated_at"),
         ;
     }

    /**
     * enum for parameter expansions
     */
     enum class Expansions_searchSpaces(val value: kotlin.String) {
         @SerialName(value = "creator_id") creatorId("creator_id"),
         @SerialName(value = "host_ids") hostIds("host_ids"),
         @SerialName(value = "invited_user_ids") invitedUserIds("invited_user_ids"),
         @SerialName(value = "speaker_ids") speakerIds("speaker_ids"),
         ;
     }

    /**
    * Search for Spaces
    * Returns Spaces that match the provided query.
    * @param query The search query 
    * @param state The state of spaces to search for (optional, default to all)
    * @param maxResults The number of results to return. The maximum for this value is 100. (optional)
    * @param spaceFields A comma separated list of Space fields to display. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @return MultiSpaceLookupResponseEntity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun searchSpaces(query: kotlin.String, state: State_searchSpaces?, maxResults: kotlin.Int?, spaceFields: kotlin.collections.List<SpaceFields_searchSpaces>?, expansions: kotlin.collections.List<Expansions_searchSpaces>?) : MultiSpaceLookupResponseEntity {
        val localVarResponse = searchSpacesWithHttpInfo(query = query, state = state, maxResults = maxResults, spaceFields = spaceFields, expansions = expansions)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MultiSpaceLookupResponseEntity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Search for Spaces
    * Returns Spaces that match the provided query.
    * @param query The search query 
    * @param state The state of spaces to search for (optional, default to all)
    * @param maxResults The number of results to return. The maximum for this value is 100. (optional)
    * @param spaceFields A comma separated list of Space fields to display. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @return ApiResponse<MultiSpaceLookupResponseEntity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun searchSpacesWithHttpInfo(query: kotlin.String, state: State_searchSpaces?, maxResults: kotlin.Int?, spaceFields: kotlin.collections.List<SpaceFields_searchSpaces>?, expansions: kotlin.collections.List<Expansions_searchSpaces>?) : ApiResponse<MultiSpaceLookupResponseEntity?> {
        val localVariableConfig = searchSpacesRequestConfig(query = query, state = state, maxResults = maxResults, spaceFields = spaceFields, expansions = expansions)

        return request<Unit, MultiSpaceLookupResponseEntity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation searchSpaces
    *
    * @param query The search query 
    * @param state The state of spaces to search for (optional, default to all)
    * @param maxResults The number of results to return. The maximum for this value is 100. (optional)
    * @param spaceFields A comma separated list of Space fields to display. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @return RequestConfig
    */
    fun searchSpacesRequestConfig(query: kotlin.String, state: State_searchSpaces?, maxResults: kotlin.Int?, spaceFields: kotlin.collections.List<SpaceFields_searchSpaces>?, expansions: kotlin.collections.List<Expansions_searchSpaces>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("query", listOf(query.toString()))
                if (state != null) {
                    put("state", listOf(state.toString()))
                }
                if (maxResults != null) {
                    put("max_results", listOf(maxResults.toString()))
                }
                if (spaceFields != null) {
                    put("space.fields", toMultiValue(spaceFields.toList(), "csv"))
                }
                if (expansions != null) {
                    put("expansions", toMultiValue(expansions.toList(), "csv"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/spaces/search",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter userFields
     */
     enum class UserFields_spaceBuyers(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "created_at") createdAt("created_at"),
         @SerialName(value = "name") name("name"),
         @SerialName(value = "username") username("username"),
         @SerialName(value = "protected") `protected`("protected"),
         @SerialName(value = "verified") verified("verified"),
         @SerialName(value = "withheld") withheld("withheld"),
         @SerialName(value = "profile_image_url") profileImageUrl("profile_image_url"),
         @SerialName(value = "location") location("location"),
         @SerialName(value = "url") url("url"),
         @SerialName(value = "description") description("description"),
         @SerialName(value = "entities") entities("entities"),
         @SerialName(value = "pinned_tweet_id") pinnedTweetId("pinned_tweet_id"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         ;
     }

    /**
    * Retrieve the list of users who purchased a ticket to the given space
    * Retrieves the list of users who purchased a ticket to the given space
    * @param id The space id from which tweets will be retrieved 
    * @param userFields A comma separated list of User fields to display. (optional)
    * @return MultiUserLookupResponseEntity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun spaceBuyers(id: kotlin.String, userFields: kotlin.collections.List<UserFields_spaceBuyers>?) : MultiUserLookupResponseEntity {
        val localVarResponse = spaceBuyersWithHttpInfo(id = id, userFields = userFields)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MultiUserLookupResponseEntity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Retrieve the list of users who purchased a ticket to the given space
    * Retrieves the list of users who purchased a ticket to the given space
    * @param id The space id from which tweets will be retrieved 
    * @param userFields A comma separated list of User fields to display. (optional)
    * @return ApiResponse<MultiUserLookupResponseEntity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun spaceBuyersWithHttpInfo(id: kotlin.String, userFields: kotlin.collections.List<UserFields_spaceBuyers>?) : ApiResponse<MultiUserLookupResponseEntity?> {
        val localVariableConfig = spaceBuyersRequestConfig(id = id, userFields = userFields)

        return request<Unit, MultiUserLookupResponseEntity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation spaceBuyers
    *
    * @param id The space id from which tweets will be retrieved 
    * @param userFields A comma separated list of User fields to display. (optional)
    * @return RequestConfig
    */
    fun spaceBuyersRequestConfig(id: kotlin.String, userFields: kotlin.collections.List<UserFields_spaceBuyers>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (userFields != null) {
                    put("user.fields", toMultiValue(userFields.toList(), "csv"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/spaces/{id}/buyers".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter tweetFields
     */
     enum class TweetFields_spaceTweets(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "created_at") createdAt("created_at"),
         @SerialName(value = "text") text("text"),
         @SerialName(value = "author_id") authorId("author_id"),
         @SerialName(value = "in_reply_to_user_id") inReplyToUserId("in_reply_to_user_id"),
         @SerialName(value = "referenced_tweets") referencedTweets("referenced_tweets"),
         @SerialName(value = "attachments") attachments("attachments"),
         @SerialName(value = "withheld") withheld("withheld"),
         @SerialName(value = "geo") geo("geo"),
         @SerialName(value = "entities") entities("entities"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         @SerialName(value = "possibly_sensitive") possiblySensitive("possibly_sensitive"),
         @SerialName(value = "source") source("source"),
         @SerialName(value = "lang") lang("lang"),
         @SerialName(value = "context_annotations") contextAnnotations("context_annotations"),
         @SerialName(value = "non_public_metrics") nonPublicMetrics("non_public_metrics"),
         @SerialName(value = "promoted_metrics") promotedMetrics("promoted_metrics"),
         @SerialName(value = "organic_metrics") organicMetrics("organic_metrics"),
         @SerialName(value = "conversation_id") conversationId("conversation_id"),
         @SerialName(value = "reply_settings") replySettings("reply_settings"),
         ;
     }

    /**
    * Retrieve tweets from a Space
    * Retrieves tweets shared in the specified space
    * @param id The space id from which tweets will be retrieved 
    * @param maxResults The number of tweets to fetch from the provided space. If not provided, the value will default to the maximum of 100 (optional)
    * @param tweetFields A comma separated list of Tweet fields to display. (optional)
    * @return MultiTweetLookupResponseEntity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun spaceTweets(id: kotlin.String, maxResults: kotlin.Int?, tweetFields: kotlin.collections.List<TweetFields_spaceTweets>?) : MultiTweetLookupResponseEntity {
        val localVarResponse = spaceTweetsWithHttpInfo(id = id, maxResults = maxResults, tweetFields = tweetFields)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MultiTweetLookupResponseEntity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Retrieve tweets from a Space
    * Retrieves tweets shared in the specified space
    * @param id The space id from which tweets will be retrieved 
    * @param maxResults The number of tweets to fetch from the provided space. If not provided, the value will default to the maximum of 100 (optional)
    * @param tweetFields A comma separated list of Tweet fields to display. (optional)
    * @return ApiResponse<MultiTweetLookupResponseEntity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun spaceTweetsWithHttpInfo(id: kotlin.String, maxResults: kotlin.Int?, tweetFields: kotlin.collections.List<TweetFields_spaceTweets>?) : ApiResponse<MultiTweetLookupResponseEntity?> {
        val localVariableConfig = spaceTweetsRequestConfig(id = id, maxResults = maxResults, tweetFields = tweetFields)

        return request<Unit, MultiTweetLookupResponseEntity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation spaceTweets
    *
    * @param id The space id from which tweets will be retrieved 
    * @param maxResults The number of tweets to fetch from the provided space. If not provided, the value will default to the maximum of 100 (optional)
    * @param tweetFields A comma separated list of Tweet fields to display. (optional)
    * @return RequestConfig
    */
    fun spaceTweetsRequestConfig(id: kotlin.String, maxResults: kotlin.Int?, tweetFields: kotlin.collections.List<TweetFields_spaceTweets>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (maxResults != null) {
                    put("max_results", listOf(maxResults.toString()))
                }
                if (tweetFields != null) {
                    put("tweet.fields", toMultiValue(tweetFields.toList(), "csv"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/spaces/{id}/tweets".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
