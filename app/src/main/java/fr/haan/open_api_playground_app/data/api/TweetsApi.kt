/**
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.42
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package fr.haan.open_api_playground_app.data.api

import java.io.IOException

import fr.haan.open_api_playground_app.data.entities.AddOrDeleteRulesRequestEntity
import fr.haan.open_api_playground_app.data.entities.AddOrDeleteRulesResponseEntity
import fr.haan.open_api_playground_app.data.entities.ErrorEntity
import fr.haan.open_api_playground_app.data.entities.FilteredStreamingTweetEntity
import fr.haan.open_api_playground_app.data.entities.GenericTweetsTimelineResponseEntity
import fr.haan.open_api_playground_app.data.entities.GranularityEntity
import fr.haan.open_api_playground_app.data.entities.InlineObject3Entity
import fr.haan.open_api_playground_app.data.entities.InlineObject4Entity
import fr.haan.open_api_playground_app.data.entities.InlineResponse2001Entity
import fr.haan.open_api_playground_app.data.entities.InlineResponse2002Entity
import fr.haan.open_api_playground_app.data.entities.InlineResponse200Entity
import fr.haan.open_api_playground_app.data.entities.MultiTweetLookupResponseEntity
import fr.haan.open_api_playground_app.data.entities.MultiUserLookupResponseEntity
import fr.haan.open_api_playground_app.data.entities.ProblemEntity
import fr.haan.open_api_playground_app.data.entities.QuoteTweetLookupResponseEntity
import fr.haan.open_api_playground_app.data.entities.SingleTweetLookupResponseEntity
import fr.haan.open_api_playground_app.data.entities.StreamingTweetEntity
import fr.haan.open_api_playground_app.data.entities.TweetCountsResponseEntity
import fr.haan.open_api_playground_app.data.entities.TweetCreateResponseEntity
import fr.haan.open_api_playground_app.data.entities.TweetDeleteResponseEntity
import fr.haan.open_api_playground_app.data.entities.TweetSearchResponseEntity
import fr.haan.open_api_playground_app.data.entities.UsersLikesCreateRequestEntity
import fr.haan.open_api_playground_app.data.entities.UsersLikesCreateResponseEntity
import fr.haan.open_api_playground_app.data.entities.UsersLikesDeleteResponseEntity
import fr.haan.open_api_playground_app.data.entities.UsersRetweetsCreateRequestEntity
import fr.haan.open_api_playground_app.data.entities.UsersRetweetsCreateResponseEntity
import fr.haan.open_api_playground_app.data.entities.UsersRetweetsDeleteResponseEntity

import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class TweetsApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.twitter.com")
        }
    }

    /**
    * Add/Delete rules
    * Add or delete rules from a user&#39;s active rule set. Users can provide unique, optionally tagged rules to add. Users can delete their entire rule set or a subset specified by rule ids or values.
    * @param addOrDeleteRulesRequestEntity  
    * @param dryRun Dry Run can be used with both the add and delete action, with the expected result given, but without actually taking any action in the system (meaning the end state will always be as it was when the request was submitted). This is particularly useful to validate rule changes. (optional)
    * @return AddOrDeleteRulesResponseEntity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun addOrDeleteRules(addOrDeleteRulesRequestEntity: AddOrDeleteRulesRequestEntity, dryRun: kotlin.Boolean?) : AddOrDeleteRulesResponseEntity {
        val localVarResponse = addOrDeleteRulesWithHttpInfo(addOrDeleteRulesRequestEntity = addOrDeleteRulesRequestEntity, dryRun = dryRun)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AddOrDeleteRulesResponseEntity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Add/Delete rules
    * Add or delete rules from a user&#39;s active rule set. Users can provide unique, optionally tagged rules to add. Users can delete their entire rule set or a subset specified by rule ids or values.
    * @param addOrDeleteRulesRequestEntity  
    * @param dryRun Dry Run can be used with both the add and delete action, with the expected result given, but without actually taking any action in the system (meaning the end state will always be as it was when the request was submitted). This is particularly useful to validate rule changes. (optional)
    * @return ApiResponse<AddOrDeleteRulesResponseEntity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun addOrDeleteRulesWithHttpInfo(addOrDeleteRulesRequestEntity: AddOrDeleteRulesRequestEntity, dryRun: kotlin.Boolean?) : ApiResponse<AddOrDeleteRulesResponseEntity?> {
        val localVariableConfig = addOrDeleteRulesRequestConfig(addOrDeleteRulesRequestEntity = addOrDeleteRulesRequestEntity, dryRun = dryRun)

        return request<AddOrDeleteRulesRequestEntity, AddOrDeleteRulesResponseEntity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation addOrDeleteRules
    *
    * @param addOrDeleteRulesRequestEntity  
    * @param dryRun Dry Run can be used with both the add and delete action, with the expected result given, but without actually taking any action in the system (meaning the end state will always be as it was when the request was submitted). This is particularly useful to validate rule changes. (optional)
    * @return RequestConfig
    */
    fun addOrDeleteRulesRequestConfig(addOrDeleteRulesRequestEntity: AddOrDeleteRulesRequestEntity, dryRun: kotlin.Boolean?) : RequestConfig<AddOrDeleteRulesRequestEntity> {
        val localVariableBody = addOrDeleteRulesRequestEntity
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (dryRun != null) {
                    put("dry_run", listOf(dryRun.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/2/tweets/search/stream/rules",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Creation of a Tweet
    * Causes the user to create a tweet under the authorized account.
    * @param inlineObject3Entity  (optional)
    * @return TweetCreateResponseEntity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createTweet(inlineObject3Entity: InlineObject3Entity?) : TweetCreateResponseEntity {
        val localVarResponse = createTweetWithHttpInfo(inlineObject3Entity = inlineObject3Entity)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TweetCreateResponseEntity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Creation of a Tweet
    * Causes the user to create a tweet under the authorized account.
    * @param inlineObject3Entity  (optional)
    * @return ApiResponse<TweetCreateResponseEntity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createTweetWithHttpInfo(inlineObject3Entity: InlineObject3Entity?) : ApiResponse<TweetCreateResponseEntity?> {
        val localVariableConfig = createTweetRequestConfig(inlineObject3Entity = inlineObject3Entity)

        return request<InlineObject3Entity, TweetCreateResponseEntity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation createTweet
    *
    * @param inlineObject3Entity  (optional)
    * @return RequestConfig
    */
    fun createTweetRequestConfig(inlineObject3Entity: InlineObject3Entity?) : RequestConfig<InlineObject3Entity> {
        val localVariableBody = inlineObject3Entity
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/2/tweets",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Tweet delete by Tweet ID
    * Delete specified Tweet (in the path) by ID.
    * @param id The ID of the Tweet to be deleted. 
    * @return TweetDeleteResponseEntity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteTweetById(id: kotlin.String) : TweetDeleteResponseEntity {
        val localVarResponse = deleteTweetByIdWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TweetDeleteResponseEntity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Tweet delete by Tweet ID
    * Delete specified Tweet (in the path) by ID.
    * @param id The ID of the Tweet to be deleted. 
    * @return ApiResponse<TweetDeleteResponseEntity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteTweetByIdWithHttpInfo(id: kotlin.String) : ApiResponse<TweetDeleteResponseEntity?> {
        val localVariableConfig = deleteTweetByIdRequestConfig(id = id)

        return request<Unit, TweetDeleteResponseEntity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation deleteTweetById
    *
    * @param id The ID of the Tweet to be deleted. 
    * @return RequestConfig
    */
    fun deleteTweetByIdRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/2/tweets/{id}".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter expansions
     */
     enum class Expansions_findTweetById(val value: kotlin.String) {
         @SerialName(value = "author_id") authorId("author_id"),
         @SerialName(value = "referenced_tweets.id") referencedTweetsPeriodId("referenced_tweets.id"),
         @SerialName(value = "in_reply_to_user_id") inReplyToUserId("in_reply_to_user_id"),
         @SerialName(value = "geo.place_id") geoPeriodPlaceId("geo.place_id"),
         @SerialName(value = "attachments.media_keys") attachmentsPeriodMediaKeys("attachments.media_keys"),
         @SerialName(value = "attachments.poll_ids") attachmentsPeriodPollIds("attachments.poll_ids"),
         @SerialName(value = "entities.mentions.username") entitiesPeriodMentionsPeriodUsername("entities.mentions.username"),
         @SerialName(value = "referenced_tweets.id.author_id") referencedTweetsPeriodIdPeriodAuthorId("referenced_tweets.id.author_id"),
         ;
     }

    /**
     * enum for parameter tweetFields
     */
     enum class TweetFields_findTweetById(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "created_at") createdAt("created_at"),
         @SerialName(value = "text") text("text"),
         @SerialName(value = "author_id") authorId("author_id"),
         @SerialName(value = "in_reply_to_user_id") inReplyToUserId("in_reply_to_user_id"),
         @SerialName(value = "referenced_tweets") referencedTweets("referenced_tweets"),
         @SerialName(value = "attachments") attachments("attachments"),
         @SerialName(value = "withheld") withheld("withheld"),
         @SerialName(value = "geo") geo("geo"),
         @SerialName(value = "entities") entities("entities"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         @SerialName(value = "possibly_sensitive") possiblySensitive("possibly_sensitive"),
         @SerialName(value = "source") source("source"),
         @SerialName(value = "lang") lang("lang"),
         @SerialName(value = "context_annotations") contextAnnotations("context_annotations"),
         @SerialName(value = "non_public_metrics") nonPublicMetrics("non_public_metrics"),
         @SerialName(value = "promoted_metrics") promotedMetrics("promoted_metrics"),
         @SerialName(value = "organic_metrics") organicMetrics("organic_metrics"),
         @SerialName(value = "conversation_id") conversationId("conversation_id"),
         @SerialName(value = "reply_settings") replySettings("reply_settings"),
         ;
     }

    /**
     * enum for parameter userFields
     */
     enum class UserFields_findTweetById(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "created_at") createdAt("created_at"),
         @SerialName(value = "name") name("name"),
         @SerialName(value = "username") username("username"),
         @SerialName(value = "protected") `protected`("protected"),
         @SerialName(value = "verified") verified("verified"),
         @SerialName(value = "withheld") withheld("withheld"),
         @SerialName(value = "profile_image_url") profileImageUrl("profile_image_url"),
         @SerialName(value = "location") location("location"),
         @SerialName(value = "url") url("url"),
         @SerialName(value = "description") description("description"),
         @SerialName(value = "entities") entities("entities"),
         @SerialName(value = "pinned_tweet_id") pinnedTweetId("pinned_tweet_id"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         ;
     }

    /**
     * enum for parameter mediaFields
     */
     enum class MediaFields_findTweetById(val value: kotlin.String) {
         @SerialName(value = "media_key") mediaKey("media_key"),
         @SerialName(value = "duration_ms") durationMs("duration_ms"),
         @SerialName(value = "height") height("height"),
         @SerialName(value = "preview_image_url") previewImageUrl("preview_image_url"),
         @SerialName(value = "type") type("type"),
         @SerialName(value = "url") url("url"),
         @SerialName(value = "width") width("width"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         @SerialName(value = "non_public_metrics") nonPublicMetrics("non_public_metrics"),
         @SerialName(value = "organic_metrics") organicMetrics("organic_metrics"),
         @SerialName(value = "promoted_metrics") promotedMetrics("promoted_metrics"),
         @SerialName(value = "alt_text") altText("alt_text"),
         @SerialName(value = "variants") variants("variants"),
         ;
     }

    /**
     * enum for parameter placeFields
     */
     enum class PlaceFields_findTweetById(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "name") name("name"),
         @SerialName(value = "country_code") countryCode("country_code"),
         @SerialName(value = "place_type") placeType("place_type"),
         @SerialName(value = "full_name") fullName("full_name"),
         @SerialName(value = "country") country("country"),
         @SerialName(value = "contained_within") containedWithin("contained_within"),
         @SerialName(value = "geo") geo("geo"),
         ;
     }

    /**
     * enum for parameter pollFields
     */
     enum class PollFields_findTweetById(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "options") options("options"),
         @SerialName(value = "voting_status") votingStatus("voting_status"),
         @SerialName(value = "end_datetime") endDatetime("end_datetime"),
         @SerialName(value = "duration_minutes") durationMinutes("duration_minutes"),
         ;
     }

    /**
    * Tweet lookup by Tweet ID
    * Returns a variety of information about the Tweet specified by the requested ID.
    * @param id A single Tweet ID. 
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param tweetFields A comma separated list of Tweet fields to display. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @param mediaFields A comma separated list of Media fields to display. (optional)
    * @param placeFields A comma separated list of Place fields to display. (optional)
    * @param pollFields A comma separated list of Poll fields to display. (optional)
    * @return SingleTweetLookupResponseEntity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun findTweetById(id: kotlin.String, expansions: kotlin.collections.List<Expansions_findTweetById>?, tweetFields: kotlin.collections.List<TweetFields_findTweetById>?, userFields: kotlin.collections.List<UserFields_findTweetById>?, mediaFields: kotlin.collections.List<MediaFields_findTweetById>?, placeFields: kotlin.collections.List<PlaceFields_findTweetById>?, pollFields: kotlin.collections.List<PollFields_findTweetById>?) : SingleTweetLookupResponseEntity {
        val localVarResponse = findTweetByIdWithHttpInfo(id = id, expansions = expansions, tweetFields = tweetFields, userFields = userFields, mediaFields = mediaFields, placeFields = placeFields, pollFields = pollFields)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SingleTweetLookupResponseEntity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Tweet lookup by Tweet ID
    * Returns a variety of information about the Tweet specified by the requested ID.
    * @param id A single Tweet ID. 
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param tweetFields A comma separated list of Tweet fields to display. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @param mediaFields A comma separated list of Media fields to display. (optional)
    * @param placeFields A comma separated list of Place fields to display. (optional)
    * @param pollFields A comma separated list of Poll fields to display. (optional)
    * @return ApiResponse<SingleTweetLookupResponseEntity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun findTweetByIdWithHttpInfo(id: kotlin.String, expansions: kotlin.collections.List<Expansions_findTweetById>?, tweetFields: kotlin.collections.List<TweetFields_findTweetById>?, userFields: kotlin.collections.List<UserFields_findTweetById>?, mediaFields: kotlin.collections.List<MediaFields_findTweetById>?, placeFields: kotlin.collections.List<PlaceFields_findTweetById>?, pollFields: kotlin.collections.List<PollFields_findTweetById>?) : ApiResponse<SingleTweetLookupResponseEntity?> {
        val localVariableConfig = findTweetByIdRequestConfig(id = id, expansions = expansions, tweetFields = tweetFields, userFields = userFields, mediaFields = mediaFields, placeFields = placeFields, pollFields = pollFields)

        return request<Unit, SingleTweetLookupResponseEntity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation findTweetById
    *
    * @param id A single Tweet ID. 
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param tweetFields A comma separated list of Tweet fields to display. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @param mediaFields A comma separated list of Media fields to display. (optional)
    * @param placeFields A comma separated list of Place fields to display. (optional)
    * @param pollFields A comma separated list of Poll fields to display. (optional)
    * @return RequestConfig
    */
    fun findTweetByIdRequestConfig(id: kotlin.String, expansions: kotlin.collections.List<Expansions_findTweetById>?, tweetFields: kotlin.collections.List<TweetFields_findTweetById>?, userFields: kotlin.collections.List<UserFields_findTweetById>?, mediaFields: kotlin.collections.List<MediaFields_findTweetById>?, placeFields: kotlin.collections.List<PlaceFields_findTweetById>?, pollFields: kotlin.collections.List<PollFields_findTweetById>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (expansions != null) {
                    put("expansions", toMultiValue(expansions.toList(), "csv"))
                }
                if (tweetFields != null) {
                    put("tweet.fields", toMultiValue(tweetFields.toList(), "csv"))
                }
                if (userFields != null) {
                    put("user.fields", toMultiValue(userFields.toList(), "csv"))
                }
                if (mediaFields != null) {
                    put("media.fields", toMultiValue(mediaFields.toList(), "csv"))
                }
                if (placeFields != null) {
                    put("place.fields", toMultiValue(placeFields.toList(), "csv"))
                }
                if (pollFields != null) {
                    put("poll.fields", toMultiValue(pollFields.toList(), "csv"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/tweets/{id}".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter expansions
     */
     enum class Expansions_findTweetsById(val value: kotlin.String) {
         @SerialName(value = "author_id") authorId("author_id"),
         @SerialName(value = "referenced_tweets.id") referencedTweetsPeriodId("referenced_tweets.id"),
         @SerialName(value = "in_reply_to_user_id") inReplyToUserId("in_reply_to_user_id"),
         @SerialName(value = "geo.place_id") geoPeriodPlaceId("geo.place_id"),
         @SerialName(value = "attachments.media_keys") attachmentsPeriodMediaKeys("attachments.media_keys"),
         @SerialName(value = "attachments.poll_ids") attachmentsPeriodPollIds("attachments.poll_ids"),
         @SerialName(value = "entities.mentions.username") entitiesPeriodMentionsPeriodUsername("entities.mentions.username"),
         @SerialName(value = "referenced_tweets.id.author_id") referencedTweetsPeriodIdPeriodAuthorId("referenced_tweets.id.author_id"),
         ;
     }

    /**
     * enum for parameter tweetFields
     */
     enum class TweetFields_findTweetsById(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "created_at") createdAt("created_at"),
         @SerialName(value = "text") text("text"),
         @SerialName(value = "author_id") authorId("author_id"),
         @SerialName(value = "in_reply_to_user_id") inReplyToUserId("in_reply_to_user_id"),
         @SerialName(value = "referenced_tweets") referencedTweets("referenced_tweets"),
         @SerialName(value = "attachments") attachments("attachments"),
         @SerialName(value = "withheld") withheld("withheld"),
         @SerialName(value = "geo") geo("geo"),
         @SerialName(value = "entities") entities("entities"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         @SerialName(value = "possibly_sensitive") possiblySensitive("possibly_sensitive"),
         @SerialName(value = "source") source("source"),
         @SerialName(value = "lang") lang("lang"),
         @SerialName(value = "context_annotations") contextAnnotations("context_annotations"),
         @SerialName(value = "non_public_metrics") nonPublicMetrics("non_public_metrics"),
         @SerialName(value = "promoted_metrics") promotedMetrics("promoted_metrics"),
         @SerialName(value = "organic_metrics") organicMetrics("organic_metrics"),
         @SerialName(value = "conversation_id") conversationId("conversation_id"),
         @SerialName(value = "reply_settings") replySettings("reply_settings"),
         ;
     }

    /**
     * enum for parameter userFields
     */
     enum class UserFields_findTweetsById(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "created_at") createdAt("created_at"),
         @SerialName(value = "name") name("name"),
         @SerialName(value = "username") username("username"),
         @SerialName(value = "protected") `protected`("protected"),
         @SerialName(value = "verified") verified("verified"),
         @SerialName(value = "withheld") withheld("withheld"),
         @SerialName(value = "profile_image_url") profileImageUrl("profile_image_url"),
         @SerialName(value = "location") location("location"),
         @SerialName(value = "url") url("url"),
         @SerialName(value = "description") description("description"),
         @SerialName(value = "entities") entities("entities"),
         @SerialName(value = "pinned_tweet_id") pinnedTweetId("pinned_tweet_id"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         ;
     }

    /**
     * enum for parameter mediaFields
     */
     enum class MediaFields_findTweetsById(val value: kotlin.String) {
         @SerialName(value = "media_key") mediaKey("media_key"),
         @SerialName(value = "duration_ms") durationMs("duration_ms"),
         @SerialName(value = "height") height("height"),
         @SerialName(value = "preview_image_url") previewImageUrl("preview_image_url"),
         @SerialName(value = "type") type("type"),
         @SerialName(value = "url") url("url"),
         @SerialName(value = "width") width("width"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         @SerialName(value = "non_public_metrics") nonPublicMetrics("non_public_metrics"),
         @SerialName(value = "organic_metrics") organicMetrics("organic_metrics"),
         @SerialName(value = "promoted_metrics") promotedMetrics("promoted_metrics"),
         @SerialName(value = "alt_text") altText("alt_text"),
         @SerialName(value = "variants") variants("variants"),
         ;
     }

    /**
     * enum for parameter placeFields
     */
     enum class PlaceFields_findTweetsById(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "name") name("name"),
         @SerialName(value = "country_code") countryCode("country_code"),
         @SerialName(value = "place_type") placeType("place_type"),
         @SerialName(value = "full_name") fullName("full_name"),
         @SerialName(value = "country") country("country"),
         @SerialName(value = "contained_within") containedWithin("contained_within"),
         @SerialName(value = "geo") geo("geo"),
         ;
     }

    /**
     * enum for parameter pollFields
     */
     enum class PollFields_findTweetsById(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "options") options("options"),
         @SerialName(value = "voting_status") votingStatus("voting_status"),
         @SerialName(value = "end_datetime") endDatetime("end_datetime"),
         @SerialName(value = "duration_minutes") durationMinutes("duration_minutes"),
         ;
     }

    /**
    * Tweet lookup by Tweet IDs
    * Returns a variety of information about the Tweet specified by the requested ID.
    * @param ids A comma separated list of Tweet IDs. Up to 100 are allowed in a single request. 
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param tweetFields A comma separated list of Tweet fields to display. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @param mediaFields A comma separated list of Media fields to display. (optional)
    * @param placeFields A comma separated list of Place fields to display. (optional)
    * @param pollFields A comma separated list of Poll fields to display. (optional)
    * @return MultiTweetLookupResponseEntity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun findTweetsById(ids: kotlin.collections.List<kotlin.String>, expansions: kotlin.collections.List<Expansions_findTweetsById>?, tweetFields: kotlin.collections.List<TweetFields_findTweetsById>?, userFields: kotlin.collections.List<UserFields_findTweetsById>?, mediaFields: kotlin.collections.List<MediaFields_findTweetsById>?, placeFields: kotlin.collections.List<PlaceFields_findTweetsById>?, pollFields: kotlin.collections.List<PollFields_findTweetsById>?) : MultiTweetLookupResponseEntity {
        val localVarResponse = findTweetsByIdWithHttpInfo(ids = ids, expansions = expansions, tweetFields = tweetFields, userFields = userFields, mediaFields = mediaFields, placeFields = placeFields, pollFields = pollFields)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MultiTweetLookupResponseEntity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Tweet lookup by Tweet IDs
    * Returns a variety of information about the Tweet specified by the requested ID.
    * @param ids A comma separated list of Tweet IDs. Up to 100 are allowed in a single request. 
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param tweetFields A comma separated list of Tweet fields to display. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @param mediaFields A comma separated list of Media fields to display. (optional)
    * @param placeFields A comma separated list of Place fields to display. (optional)
    * @param pollFields A comma separated list of Poll fields to display. (optional)
    * @return ApiResponse<MultiTweetLookupResponseEntity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun findTweetsByIdWithHttpInfo(ids: kotlin.collections.List<kotlin.String>, expansions: kotlin.collections.List<Expansions_findTweetsById>?, tweetFields: kotlin.collections.List<TweetFields_findTweetsById>?, userFields: kotlin.collections.List<UserFields_findTweetsById>?, mediaFields: kotlin.collections.List<MediaFields_findTweetsById>?, placeFields: kotlin.collections.List<PlaceFields_findTweetsById>?, pollFields: kotlin.collections.List<PollFields_findTweetsById>?) : ApiResponse<MultiTweetLookupResponseEntity?> {
        val localVariableConfig = findTweetsByIdRequestConfig(ids = ids, expansions = expansions, tweetFields = tweetFields, userFields = userFields, mediaFields = mediaFields, placeFields = placeFields, pollFields = pollFields)

        return request<Unit, MultiTweetLookupResponseEntity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation findTweetsById
    *
    * @param ids A comma separated list of Tweet IDs. Up to 100 are allowed in a single request. 
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param tweetFields A comma separated list of Tweet fields to display. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @param mediaFields A comma separated list of Media fields to display. (optional)
    * @param placeFields A comma separated list of Place fields to display. (optional)
    * @param pollFields A comma separated list of Poll fields to display. (optional)
    * @return RequestConfig
    */
    fun findTweetsByIdRequestConfig(ids: kotlin.collections.List<kotlin.String>, expansions: kotlin.collections.List<Expansions_findTweetsById>?, tweetFields: kotlin.collections.List<TweetFields_findTweetsById>?, userFields: kotlin.collections.List<UserFields_findTweetsById>?, mediaFields: kotlin.collections.List<MediaFields_findTweetsById>?, placeFields: kotlin.collections.List<PlaceFields_findTweetsById>?, pollFields: kotlin.collections.List<PollFields_findTweetsById>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("ids", toMultiValue(ids.toList(), "csv"))
                if (expansions != null) {
                    put("expansions", toMultiValue(expansions.toList(), "csv"))
                }
                if (tweetFields != null) {
                    put("tweet.fields", toMultiValue(tweetFields.toList(), "csv"))
                }
                if (userFields != null) {
                    put("user.fields", toMultiValue(userFields.toList(), "csv"))
                }
                if (mediaFields != null) {
                    put("media.fields", toMultiValue(mediaFields.toList(), "csv"))
                }
                if (placeFields != null) {
                    put("place.fields", toMultiValue(placeFields.toList(), "csv"))
                }
                if (pollFields != null) {
                    put("poll.fields", toMultiValue(pollFields.toList(), "csv"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/tweets",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter exclude
     */
     enum class Exclude_findTweetsThatQuoteATweet(val value: kotlin.String) {
         @SerialName(value = "replies") replies("replies"),
         @SerialName(value = "retweets") retweets("retweets"),
         ;
     }

    /**
     * enum for parameter expansions
     */
     enum class Expansions_findTweetsThatQuoteATweet(val value: kotlin.String) {
         @SerialName(value = "author_id") authorId("author_id"),
         @SerialName(value = "referenced_tweets.id") referencedTweetsPeriodId("referenced_tweets.id"),
         @SerialName(value = "in_reply_to_user_id") inReplyToUserId("in_reply_to_user_id"),
         @SerialName(value = "geo.place_id") geoPeriodPlaceId("geo.place_id"),
         @SerialName(value = "attachments.media_keys") attachmentsPeriodMediaKeys("attachments.media_keys"),
         @SerialName(value = "attachments.poll_ids") attachmentsPeriodPollIds("attachments.poll_ids"),
         @SerialName(value = "entities.mentions.username") entitiesPeriodMentionsPeriodUsername("entities.mentions.username"),
         @SerialName(value = "referenced_tweets.id.author_id") referencedTweetsPeriodIdPeriodAuthorId("referenced_tweets.id.author_id"),
         ;
     }

    /**
     * enum for parameter tweetFields
     */
     enum class TweetFields_findTweetsThatQuoteATweet(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "created_at") createdAt("created_at"),
         @SerialName(value = "text") text("text"),
         @SerialName(value = "author_id") authorId("author_id"),
         @SerialName(value = "in_reply_to_user_id") inReplyToUserId("in_reply_to_user_id"),
         @SerialName(value = "referenced_tweets") referencedTweets("referenced_tweets"),
         @SerialName(value = "attachments") attachments("attachments"),
         @SerialName(value = "withheld") withheld("withheld"),
         @SerialName(value = "geo") geo("geo"),
         @SerialName(value = "entities") entities("entities"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         @SerialName(value = "possibly_sensitive") possiblySensitive("possibly_sensitive"),
         @SerialName(value = "source") source("source"),
         @SerialName(value = "lang") lang("lang"),
         @SerialName(value = "context_annotations") contextAnnotations("context_annotations"),
         @SerialName(value = "non_public_metrics") nonPublicMetrics("non_public_metrics"),
         @SerialName(value = "promoted_metrics") promotedMetrics("promoted_metrics"),
         @SerialName(value = "organic_metrics") organicMetrics("organic_metrics"),
         @SerialName(value = "conversation_id") conversationId("conversation_id"),
         @SerialName(value = "reply_settings") replySettings("reply_settings"),
         ;
     }

    /**
     * enum for parameter userFields
     */
     enum class UserFields_findTweetsThatQuoteATweet(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "created_at") createdAt("created_at"),
         @SerialName(value = "name") name("name"),
         @SerialName(value = "username") username("username"),
         @SerialName(value = "protected") `protected`("protected"),
         @SerialName(value = "verified") verified("verified"),
         @SerialName(value = "withheld") withheld("withheld"),
         @SerialName(value = "profile_image_url") profileImageUrl("profile_image_url"),
         @SerialName(value = "location") location("location"),
         @SerialName(value = "url") url("url"),
         @SerialName(value = "description") description("description"),
         @SerialName(value = "entities") entities("entities"),
         @SerialName(value = "pinned_tweet_id") pinnedTweetId("pinned_tweet_id"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         ;
     }

    /**
     * enum for parameter mediaFields
     */
     enum class MediaFields_findTweetsThatQuoteATweet(val value: kotlin.String) {
         @SerialName(value = "media_key") mediaKey("media_key"),
         @SerialName(value = "duration_ms") durationMs("duration_ms"),
         @SerialName(value = "height") height("height"),
         @SerialName(value = "preview_image_url") previewImageUrl("preview_image_url"),
         @SerialName(value = "type") type("type"),
         @SerialName(value = "url") url("url"),
         @SerialName(value = "width") width("width"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         @SerialName(value = "non_public_metrics") nonPublicMetrics("non_public_metrics"),
         @SerialName(value = "organic_metrics") organicMetrics("organic_metrics"),
         @SerialName(value = "promoted_metrics") promotedMetrics("promoted_metrics"),
         @SerialName(value = "alt_text") altText("alt_text"),
         @SerialName(value = "variants") variants("variants"),
         ;
     }

    /**
     * enum for parameter placeFields
     */
     enum class PlaceFields_findTweetsThatQuoteATweet(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "name") name("name"),
         @SerialName(value = "country_code") countryCode("country_code"),
         @SerialName(value = "place_type") placeType("place_type"),
         @SerialName(value = "full_name") fullName("full_name"),
         @SerialName(value = "country") country("country"),
         @SerialName(value = "contained_within") containedWithin("contained_within"),
         @SerialName(value = "geo") geo("geo"),
         ;
     }

    /**
     * enum for parameter pollFields
     */
     enum class PollFields_findTweetsThatQuoteATweet(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "options") options("options"),
         @SerialName(value = "voting_status") votingStatus("voting_status"),
         @SerialName(value = "end_datetime") endDatetime("end_datetime"),
         @SerialName(value = "duration_minutes") durationMinutes("duration_minutes"),
         ;
     }

    /**
    * Retrieve tweets that quote a tweet.
    * Returns a variety of information about each tweet that quotes the Tweet specified by the requested ID.
    * @param id The ID of the Quoted Tweet. 
    * @param maxResults The maximum number of results to be returned. (optional, default to 10)
    * @param exclude The set of entities to exclude (e.g. &#39;replies&#39; or &#39;retweets&#39;) (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param tweetFields A comma separated list of Tweet fields to display. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @param mediaFields A comma separated list of Media fields to display. (optional)
    * @param placeFields A comma separated list of Place fields to display. (optional)
    * @param pollFields A comma separated list of Poll fields to display. (optional)
    * @return QuoteTweetLookupResponseEntity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun findTweetsThatQuoteATweet(id: kotlin.String, maxResults: kotlin.Int?, exclude: kotlin.collections.List<Exclude_findTweetsThatQuoteATweet>?, expansions: kotlin.collections.List<Expansions_findTweetsThatQuoteATweet>?, tweetFields: kotlin.collections.List<TweetFields_findTweetsThatQuoteATweet>?, userFields: kotlin.collections.List<UserFields_findTweetsThatQuoteATweet>?, mediaFields: kotlin.collections.List<MediaFields_findTweetsThatQuoteATweet>?, placeFields: kotlin.collections.List<PlaceFields_findTweetsThatQuoteATweet>?, pollFields: kotlin.collections.List<PollFields_findTweetsThatQuoteATweet>?) : QuoteTweetLookupResponseEntity {
        val localVarResponse = findTweetsThatQuoteATweetWithHttpInfo(id = id, maxResults = maxResults, exclude = exclude, expansions = expansions, tweetFields = tweetFields, userFields = userFields, mediaFields = mediaFields, placeFields = placeFields, pollFields = pollFields)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as QuoteTweetLookupResponseEntity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Retrieve tweets that quote a tweet.
    * Returns a variety of information about each tweet that quotes the Tweet specified by the requested ID.
    * @param id The ID of the Quoted Tweet. 
    * @param maxResults The maximum number of results to be returned. (optional, default to 10)
    * @param exclude The set of entities to exclude (e.g. &#39;replies&#39; or &#39;retweets&#39;) (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param tweetFields A comma separated list of Tweet fields to display. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @param mediaFields A comma separated list of Media fields to display. (optional)
    * @param placeFields A comma separated list of Place fields to display. (optional)
    * @param pollFields A comma separated list of Poll fields to display. (optional)
    * @return ApiResponse<QuoteTweetLookupResponseEntity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun findTweetsThatQuoteATweetWithHttpInfo(id: kotlin.String, maxResults: kotlin.Int?, exclude: kotlin.collections.List<Exclude_findTweetsThatQuoteATweet>?, expansions: kotlin.collections.List<Expansions_findTweetsThatQuoteATweet>?, tweetFields: kotlin.collections.List<TweetFields_findTweetsThatQuoteATweet>?, userFields: kotlin.collections.List<UserFields_findTweetsThatQuoteATweet>?, mediaFields: kotlin.collections.List<MediaFields_findTweetsThatQuoteATweet>?, placeFields: kotlin.collections.List<PlaceFields_findTweetsThatQuoteATweet>?, pollFields: kotlin.collections.List<PollFields_findTweetsThatQuoteATweet>?) : ApiResponse<QuoteTweetLookupResponseEntity?> {
        val localVariableConfig = findTweetsThatQuoteATweetRequestConfig(id = id, maxResults = maxResults, exclude = exclude, expansions = expansions, tweetFields = tweetFields, userFields = userFields, mediaFields = mediaFields, placeFields = placeFields, pollFields = pollFields)

        return request<Unit, QuoteTweetLookupResponseEntity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation findTweetsThatQuoteATweet
    *
    * @param id The ID of the Quoted Tweet. 
    * @param maxResults The maximum number of results to be returned. (optional, default to 10)
    * @param exclude The set of entities to exclude (e.g. &#39;replies&#39; or &#39;retweets&#39;) (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param tweetFields A comma separated list of Tweet fields to display. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @param mediaFields A comma separated list of Media fields to display. (optional)
    * @param placeFields A comma separated list of Place fields to display. (optional)
    * @param pollFields A comma separated list of Poll fields to display. (optional)
    * @return RequestConfig
    */
    fun findTweetsThatQuoteATweetRequestConfig(id: kotlin.String, maxResults: kotlin.Int?, exclude: kotlin.collections.List<Exclude_findTweetsThatQuoteATweet>?, expansions: kotlin.collections.List<Expansions_findTweetsThatQuoteATweet>?, tweetFields: kotlin.collections.List<TweetFields_findTweetsThatQuoteATweet>?, userFields: kotlin.collections.List<UserFields_findTweetsThatQuoteATweet>?, mediaFields: kotlin.collections.List<MediaFields_findTweetsThatQuoteATweet>?, placeFields: kotlin.collections.List<PlaceFields_findTweetsThatQuoteATweet>?, pollFields: kotlin.collections.List<PollFields_findTweetsThatQuoteATweet>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (maxResults != null) {
                    put("max_results", listOf(maxResults.toString()))
                }
                if (exclude != null) {
                    put("exclude", toMultiValue(exclude.toList(), "csv"))
                }
                if (expansions != null) {
                    put("expansions", toMultiValue(expansions.toList(), "csv"))
                }
                if (tweetFields != null) {
                    put("tweet.fields", toMultiValue(tweetFields.toList(), "csv"))
                }
                if (userFields != null) {
                    put("user.fields", toMultiValue(userFields.toList(), "csv"))
                }
                if (mediaFields != null) {
                    put("media.fields", toMultiValue(mediaFields.toList(), "csv"))
                }
                if (placeFields != null) {
                    put("place.fields", toMultiValue(placeFields.toList(), "csv"))
                }
                if (pollFields != null) {
                    put("poll.fields", toMultiValue(pollFields.toList(), "csv"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/tweets/{id}/quote_tweets".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Rules lookup
    * Returns rules from a user&#39;s active rule set. Users can fetch all of their rules or a subset, specified by the provided rule ids.
    * @param ids A comma-separated list of Rule IDs. (optional)
    * @param maxResults The maximum number of results (optional, default to 1000)
    * @param paginationToken This value is populated by passing the &#39;next_token&#39; returned in a request to paginate through results. (optional)
    * @return InlineResponse2001Entity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getRules(ids: kotlin.collections.List<kotlin.String>?, maxResults: kotlin.Int?, paginationToken: kotlin.String?) : InlineResponse2001Entity {
        val localVarResponse = getRulesWithHttpInfo(ids = ids, maxResults = maxResults, paginationToken = paginationToken)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse2001Entity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Rules lookup
    * Returns rules from a user&#39;s active rule set. Users can fetch all of their rules or a subset, specified by the provided rule ids.
    * @param ids A comma-separated list of Rule IDs. (optional)
    * @param maxResults The maximum number of results (optional, default to 1000)
    * @param paginationToken This value is populated by passing the &#39;next_token&#39; returned in a request to paginate through results. (optional)
    * @return ApiResponse<InlineResponse2001Entity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getRulesWithHttpInfo(ids: kotlin.collections.List<kotlin.String>?, maxResults: kotlin.Int?, paginationToken: kotlin.String?) : ApiResponse<InlineResponse2001Entity?> {
        val localVariableConfig = getRulesRequestConfig(ids = ids, maxResults = maxResults, paginationToken = paginationToken)

        return request<Unit, InlineResponse2001Entity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getRules
    *
    * @param ids A comma-separated list of Rule IDs. (optional)
    * @param maxResults The maximum number of results (optional, default to 1000)
    * @param paginationToken This value is populated by passing the &#39;next_token&#39; returned in a request to paginate through results. (optional)
    * @return RequestConfig
    */
    fun getRulesRequestConfig(ids: kotlin.collections.List<kotlin.String>?, maxResults: kotlin.Int?, paginationToken: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (ids != null) {
                    put("ids", toMultiValue(ids.toList(), "multi"))
                }
                if (maxResults != null) {
                    put("max_results", listOf(maxResults.toString()))
                }
                if (paginationToken != null) {
                    put("pagination_token", listOf(paginationToken.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/tweets/search/stream/rules",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Hide replies
    * Hides or unhides a reply to an owned conversation.
    * @param id The ID of the reply that you want to hide or unhide. 
    * @param inlineObject4Entity  (optional)
    * @return InlineResponse200Entity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun hideReplyById(id: kotlin.String, inlineObject4Entity: InlineObject4Entity?) : InlineResponse200Entity {
        val localVarResponse = hideReplyByIdWithHttpInfo(id = id, inlineObject4Entity = inlineObject4Entity)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse200Entity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Hide replies
    * Hides or unhides a reply to an owned conversation.
    * @param id The ID of the reply that you want to hide or unhide. 
    * @param inlineObject4Entity  (optional)
    * @return ApiResponse<InlineResponse200Entity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun hideReplyByIdWithHttpInfo(id: kotlin.String, inlineObject4Entity: InlineObject4Entity?) : ApiResponse<InlineResponse200Entity?> {
        val localVariableConfig = hideReplyByIdRequestConfig(id = id, inlineObject4Entity = inlineObject4Entity)

        return request<InlineObject4Entity, InlineResponse200Entity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation hideReplyById
    *
    * @param id The ID of the reply that you want to hide or unhide. 
    * @param inlineObject4Entity  (optional)
    * @return RequestConfig
    */
    fun hideReplyByIdRequestConfig(id: kotlin.String, inlineObject4Entity: InlineObject4Entity?) : RequestConfig<InlineObject4Entity> {
        val localVariableBody = inlineObject4Entity
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/2/tweets/{id}/hidden".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter expansions
     */
     enum class Expansions_listsIdTweets(val value: kotlin.String) {
         @SerialName(value = "author_id") authorId("author_id"),
         @SerialName(value = "referenced_tweets.id") referencedTweetsPeriodId("referenced_tweets.id"),
         @SerialName(value = "in_reply_to_user_id") inReplyToUserId("in_reply_to_user_id"),
         @SerialName(value = "geo.place_id") geoPeriodPlaceId("geo.place_id"),
         @SerialName(value = "attachments.media_keys") attachmentsPeriodMediaKeys("attachments.media_keys"),
         @SerialName(value = "attachments.poll_ids") attachmentsPeriodPollIds("attachments.poll_ids"),
         @SerialName(value = "entities.mentions.username") entitiesPeriodMentionsPeriodUsername("entities.mentions.username"),
         @SerialName(value = "referenced_tweets.id.author_id") referencedTweetsPeriodIdPeriodAuthorId("referenced_tweets.id.author_id"),
         ;
     }

    /**
     * enum for parameter tweetFields
     */
     enum class TweetFields_listsIdTweets(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "created_at") createdAt("created_at"),
         @SerialName(value = "text") text("text"),
         @SerialName(value = "author_id") authorId("author_id"),
         @SerialName(value = "in_reply_to_user_id") inReplyToUserId("in_reply_to_user_id"),
         @SerialName(value = "referenced_tweets") referencedTweets("referenced_tweets"),
         @SerialName(value = "attachments") attachments("attachments"),
         @SerialName(value = "withheld") withheld("withheld"),
         @SerialName(value = "geo") geo("geo"),
         @SerialName(value = "entities") entities("entities"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         @SerialName(value = "possibly_sensitive") possiblySensitive("possibly_sensitive"),
         @SerialName(value = "source") source("source"),
         @SerialName(value = "lang") lang("lang"),
         @SerialName(value = "context_annotations") contextAnnotations("context_annotations"),
         @SerialName(value = "non_public_metrics") nonPublicMetrics("non_public_metrics"),
         @SerialName(value = "promoted_metrics") promotedMetrics("promoted_metrics"),
         @SerialName(value = "organic_metrics") organicMetrics("organic_metrics"),
         @SerialName(value = "conversation_id") conversationId("conversation_id"),
         @SerialName(value = "reply_settings") replySettings("reply_settings"),
         ;
     }

    /**
     * enum for parameter userFields
     */
     enum class UserFields_listsIdTweets(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "created_at") createdAt("created_at"),
         @SerialName(value = "name") name("name"),
         @SerialName(value = "username") username("username"),
         @SerialName(value = "protected") `protected`("protected"),
         @SerialName(value = "verified") verified("verified"),
         @SerialName(value = "withheld") withheld("withheld"),
         @SerialName(value = "profile_image_url") profileImageUrl("profile_image_url"),
         @SerialName(value = "location") location("location"),
         @SerialName(value = "url") url("url"),
         @SerialName(value = "description") description("description"),
         @SerialName(value = "entities") entities("entities"),
         @SerialName(value = "pinned_tweet_id") pinnedTweetId("pinned_tweet_id"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         ;
     }

    /**
     * enum for parameter mediaFields
     */
     enum class MediaFields_listsIdTweets(val value: kotlin.String) {
         @SerialName(value = "media_key") mediaKey("media_key"),
         @SerialName(value = "duration_ms") durationMs("duration_ms"),
         @SerialName(value = "height") height("height"),
         @SerialName(value = "preview_image_url") previewImageUrl("preview_image_url"),
         @SerialName(value = "type") type("type"),
         @SerialName(value = "url") url("url"),
         @SerialName(value = "width") width("width"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         @SerialName(value = "non_public_metrics") nonPublicMetrics("non_public_metrics"),
         @SerialName(value = "organic_metrics") organicMetrics("organic_metrics"),
         @SerialName(value = "promoted_metrics") promotedMetrics("promoted_metrics"),
         @SerialName(value = "alt_text") altText("alt_text"),
         @SerialName(value = "variants") variants("variants"),
         ;
     }

    /**
     * enum for parameter placeFields
     */
     enum class PlaceFields_listsIdTweets(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "name") name("name"),
         @SerialName(value = "country_code") countryCode("country_code"),
         @SerialName(value = "place_type") placeType("place_type"),
         @SerialName(value = "full_name") fullName("full_name"),
         @SerialName(value = "country") country("country"),
         @SerialName(value = "contained_within") containedWithin("contained_within"),
         @SerialName(value = "geo") geo("geo"),
         ;
     }

    /**
     * enum for parameter pollFields
     */
     enum class PollFields_listsIdTweets(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "options") options("options"),
         @SerialName(value = "voting_status") votingStatus("voting_status"),
         @SerialName(value = "end_datetime") endDatetime("end_datetime"),
         @SerialName(value = "duration_minutes") durationMinutes("duration_minutes"),
         ;
     }

    /**
    * List Tweets timeline by List ID
    * Returns a list of Tweets associated with the provided List ID
    * @param id The ID of the List to list Tweets of 
    * @param maxResults The maximum number of results (optional, default to 100)
    * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param tweetFields A comma separated list of Tweet fields to display. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @param mediaFields A comma separated list of Media fields to display. (optional)
    * @param placeFields A comma separated list of Place fields to display. (optional)
    * @param pollFields A comma separated list of Poll fields to display. (optional)
    * @return InlineResponse2002Entity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listsIdTweets(id: kotlin.String, maxResults: kotlin.Int?, paginationToken: kotlin.String?, expansions: kotlin.collections.List<Expansions_listsIdTweets>?, tweetFields: kotlin.collections.List<TweetFields_listsIdTweets>?, userFields: kotlin.collections.List<UserFields_listsIdTweets>?, mediaFields: kotlin.collections.List<MediaFields_listsIdTweets>?, placeFields: kotlin.collections.List<PlaceFields_listsIdTweets>?, pollFields: kotlin.collections.List<PollFields_listsIdTweets>?) : InlineResponse2002Entity {
        val localVarResponse = listsIdTweetsWithHttpInfo(id = id, maxResults = maxResults, paginationToken = paginationToken, expansions = expansions, tweetFields = tweetFields, userFields = userFields, mediaFields = mediaFields, placeFields = placeFields, pollFields = pollFields)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse2002Entity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * List Tweets timeline by List ID
    * Returns a list of Tweets associated with the provided List ID
    * @param id The ID of the List to list Tweets of 
    * @param maxResults The maximum number of results (optional, default to 100)
    * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param tweetFields A comma separated list of Tweet fields to display. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @param mediaFields A comma separated list of Media fields to display. (optional)
    * @param placeFields A comma separated list of Place fields to display. (optional)
    * @param pollFields A comma separated list of Poll fields to display. (optional)
    * @return ApiResponse<InlineResponse2002Entity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listsIdTweetsWithHttpInfo(id: kotlin.String, maxResults: kotlin.Int?, paginationToken: kotlin.String?, expansions: kotlin.collections.List<Expansions_listsIdTweets>?, tweetFields: kotlin.collections.List<TweetFields_listsIdTweets>?, userFields: kotlin.collections.List<UserFields_listsIdTweets>?, mediaFields: kotlin.collections.List<MediaFields_listsIdTweets>?, placeFields: kotlin.collections.List<PlaceFields_listsIdTweets>?, pollFields: kotlin.collections.List<PollFields_listsIdTweets>?) : ApiResponse<InlineResponse2002Entity?> {
        val localVariableConfig = listsIdTweetsRequestConfig(id = id, maxResults = maxResults, paginationToken = paginationToken, expansions = expansions, tweetFields = tweetFields, userFields = userFields, mediaFields = mediaFields, placeFields = placeFields, pollFields = pollFields)

        return request<Unit, InlineResponse2002Entity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation listsIdTweets
    *
    * @param id The ID of the List to list Tweets of 
    * @param maxResults The maximum number of results (optional, default to 100)
    * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param tweetFields A comma separated list of Tweet fields to display. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @param mediaFields A comma separated list of Media fields to display. (optional)
    * @param placeFields A comma separated list of Place fields to display. (optional)
    * @param pollFields A comma separated list of Poll fields to display. (optional)
    * @return RequestConfig
    */
    fun listsIdTweetsRequestConfig(id: kotlin.String, maxResults: kotlin.Int?, paginationToken: kotlin.String?, expansions: kotlin.collections.List<Expansions_listsIdTweets>?, tweetFields: kotlin.collections.List<TweetFields_listsIdTweets>?, userFields: kotlin.collections.List<UserFields_listsIdTweets>?, mediaFields: kotlin.collections.List<MediaFields_listsIdTweets>?, placeFields: kotlin.collections.List<PlaceFields_listsIdTweets>?, pollFields: kotlin.collections.List<PollFields_listsIdTweets>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (maxResults != null) {
                    put("max_results", listOf(maxResults.toString()))
                }
                if (paginationToken != null) {
                    put("pagination_token", listOf(paginationToken.toString()))
                }
                if (expansions != null) {
                    put("expansions", toMultiValue(expansions.toList(), "csv"))
                }
                if (tweetFields != null) {
                    put("tweet.fields", toMultiValue(tweetFields.toList(), "csv"))
                }
                if (userFields != null) {
                    put("user.fields", toMultiValue(userFields.toList(), "csv"))
                }
                if (mediaFields != null) {
                    put("media.fields", toMultiValue(mediaFields.toList(), "csv"))
                }
                if (placeFields != null) {
                    put("place.fields", toMultiValue(placeFields.toList(), "csv"))
                }
                if (pollFields != null) {
                    put("poll.fields", toMultiValue(pollFields.toList(), "csv"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/lists/{id}/tweets".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter expansions
     */
     enum class Expansions_sampleStream(val value: kotlin.String) {
         @SerialName(value = "author_id") authorId("author_id"),
         @SerialName(value = "referenced_tweets.id") referencedTweetsPeriodId("referenced_tweets.id"),
         @SerialName(value = "in_reply_to_user_id") inReplyToUserId("in_reply_to_user_id"),
         @SerialName(value = "geo.place_id") geoPeriodPlaceId("geo.place_id"),
         @SerialName(value = "attachments.media_keys") attachmentsPeriodMediaKeys("attachments.media_keys"),
         @SerialName(value = "attachments.poll_ids") attachmentsPeriodPollIds("attachments.poll_ids"),
         @SerialName(value = "entities.mentions.username") entitiesPeriodMentionsPeriodUsername("entities.mentions.username"),
         @SerialName(value = "referenced_tweets.id.author_id") referencedTweetsPeriodIdPeriodAuthorId("referenced_tweets.id.author_id"),
         ;
     }

    /**
     * enum for parameter tweetFields
     */
     enum class TweetFields_sampleStream(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "created_at") createdAt("created_at"),
         @SerialName(value = "text") text("text"),
         @SerialName(value = "author_id") authorId("author_id"),
         @SerialName(value = "in_reply_to_user_id") inReplyToUserId("in_reply_to_user_id"),
         @SerialName(value = "referenced_tweets") referencedTweets("referenced_tweets"),
         @SerialName(value = "attachments") attachments("attachments"),
         @SerialName(value = "withheld") withheld("withheld"),
         @SerialName(value = "geo") geo("geo"),
         @SerialName(value = "entities") entities("entities"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         @SerialName(value = "possibly_sensitive") possiblySensitive("possibly_sensitive"),
         @SerialName(value = "source") source("source"),
         @SerialName(value = "lang") lang("lang"),
         @SerialName(value = "context_annotations") contextAnnotations("context_annotations"),
         @SerialName(value = "non_public_metrics") nonPublicMetrics("non_public_metrics"),
         @SerialName(value = "promoted_metrics") promotedMetrics("promoted_metrics"),
         @SerialName(value = "organic_metrics") organicMetrics("organic_metrics"),
         @SerialName(value = "conversation_id") conversationId("conversation_id"),
         @SerialName(value = "reply_settings") replySettings("reply_settings"),
         ;
     }

    /**
     * enum for parameter userFields
     */
     enum class UserFields_sampleStream(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "created_at") createdAt("created_at"),
         @SerialName(value = "name") name("name"),
         @SerialName(value = "username") username("username"),
         @SerialName(value = "protected") `protected`("protected"),
         @SerialName(value = "verified") verified("verified"),
         @SerialName(value = "withheld") withheld("withheld"),
         @SerialName(value = "profile_image_url") profileImageUrl("profile_image_url"),
         @SerialName(value = "location") location("location"),
         @SerialName(value = "url") url("url"),
         @SerialName(value = "description") description("description"),
         @SerialName(value = "entities") entities("entities"),
         @SerialName(value = "pinned_tweet_id") pinnedTweetId("pinned_tweet_id"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         ;
     }

    /**
     * enum for parameter mediaFields
     */
     enum class MediaFields_sampleStream(val value: kotlin.String) {
         @SerialName(value = "media_key") mediaKey("media_key"),
         @SerialName(value = "duration_ms") durationMs("duration_ms"),
         @SerialName(value = "height") height("height"),
         @SerialName(value = "preview_image_url") previewImageUrl("preview_image_url"),
         @SerialName(value = "type") type("type"),
         @SerialName(value = "url") url("url"),
         @SerialName(value = "width") width("width"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         @SerialName(value = "non_public_metrics") nonPublicMetrics("non_public_metrics"),
         @SerialName(value = "organic_metrics") organicMetrics("organic_metrics"),
         @SerialName(value = "promoted_metrics") promotedMetrics("promoted_metrics"),
         @SerialName(value = "alt_text") altText("alt_text"),
         @SerialName(value = "variants") variants("variants"),
         ;
     }

    /**
     * enum for parameter placeFields
     */
     enum class PlaceFields_sampleStream(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "name") name("name"),
         @SerialName(value = "country_code") countryCode("country_code"),
         @SerialName(value = "place_type") placeType("place_type"),
         @SerialName(value = "full_name") fullName("full_name"),
         @SerialName(value = "country") country("country"),
         @SerialName(value = "contained_within") containedWithin("contained_within"),
         @SerialName(value = "geo") geo("geo"),
         ;
     }

    /**
     * enum for parameter pollFields
     */
     enum class PollFields_sampleStream(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "options") options("options"),
         @SerialName(value = "voting_status") votingStatus("voting_status"),
         @SerialName(value = "end_datetime") endDatetime("end_datetime"),
         @SerialName(value = "duration_minutes") durationMinutes("duration_minutes"),
         ;
     }

    /**
    * Sample stream
    * Streams a deterministic 1% of public Tweets.
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param tweetFields A comma separated list of Tweet fields to display. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @param mediaFields A comma separated list of Media fields to display. (optional)
    * @param placeFields A comma separated list of Place fields to display. (optional)
    * @param pollFields A comma separated list of Poll fields to display. (optional)
    * @param backfillMinutes The number of minutes of backfill requested (optional)
    * @return StreamingTweetEntity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun sampleStream(expansions: kotlin.collections.List<Expansions_sampleStream>?, tweetFields: kotlin.collections.List<TweetFields_sampleStream>?, userFields: kotlin.collections.List<UserFields_sampleStream>?, mediaFields: kotlin.collections.List<MediaFields_sampleStream>?, placeFields: kotlin.collections.List<PlaceFields_sampleStream>?, pollFields: kotlin.collections.List<PollFields_sampleStream>?, backfillMinutes: kotlin.Int?) : StreamingTweetEntity {
        val localVarResponse = sampleStreamWithHttpInfo(expansions = expansions, tweetFields = tweetFields, userFields = userFields, mediaFields = mediaFields, placeFields = placeFields, pollFields = pollFields, backfillMinutes = backfillMinutes)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as StreamingTweetEntity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Sample stream
    * Streams a deterministic 1% of public Tweets.
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param tweetFields A comma separated list of Tweet fields to display. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @param mediaFields A comma separated list of Media fields to display. (optional)
    * @param placeFields A comma separated list of Place fields to display. (optional)
    * @param pollFields A comma separated list of Poll fields to display. (optional)
    * @param backfillMinutes The number of minutes of backfill requested (optional)
    * @return ApiResponse<StreamingTweetEntity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun sampleStreamWithHttpInfo(expansions: kotlin.collections.List<Expansions_sampleStream>?, tweetFields: kotlin.collections.List<TweetFields_sampleStream>?, userFields: kotlin.collections.List<UserFields_sampleStream>?, mediaFields: kotlin.collections.List<MediaFields_sampleStream>?, placeFields: kotlin.collections.List<PlaceFields_sampleStream>?, pollFields: kotlin.collections.List<PollFields_sampleStream>?, backfillMinutes: kotlin.Int?) : ApiResponse<StreamingTweetEntity?> {
        val localVariableConfig = sampleStreamRequestConfig(expansions = expansions, tweetFields = tweetFields, userFields = userFields, mediaFields = mediaFields, placeFields = placeFields, pollFields = pollFields, backfillMinutes = backfillMinutes)

        return request<Unit, StreamingTweetEntity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation sampleStream
    *
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param tweetFields A comma separated list of Tweet fields to display. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @param mediaFields A comma separated list of Media fields to display. (optional)
    * @param placeFields A comma separated list of Place fields to display. (optional)
    * @param pollFields A comma separated list of Poll fields to display. (optional)
    * @param backfillMinutes The number of minutes of backfill requested (optional)
    * @return RequestConfig
    */
    fun sampleStreamRequestConfig(expansions: kotlin.collections.List<Expansions_sampleStream>?, tweetFields: kotlin.collections.List<TweetFields_sampleStream>?, userFields: kotlin.collections.List<UserFields_sampleStream>?, mediaFields: kotlin.collections.List<MediaFields_sampleStream>?, placeFields: kotlin.collections.List<PlaceFields_sampleStream>?, pollFields: kotlin.collections.List<PollFields_sampleStream>?, backfillMinutes: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (expansions != null) {
                    put("expansions", toMultiValue(expansions.toList(), "csv"))
                }
                if (tweetFields != null) {
                    put("tweet.fields", toMultiValue(tweetFields.toList(), "csv"))
                }
                if (userFields != null) {
                    put("user.fields", toMultiValue(userFields.toList(), "csv"))
                }
                if (mediaFields != null) {
                    put("media.fields", toMultiValue(mediaFields.toList(), "csv"))
                }
                if (placeFields != null) {
                    put("place.fields", toMultiValue(placeFields.toList(), "csv"))
                }
                if (pollFields != null) {
                    put("poll.fields", toMultiValue(pollFields.toList(), "csv"))
                }
                if (backfillMinutes != null) {
                    put("backfill_minutes", listOf(backfillMinutes.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/tweets/sample/stream",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter expansions
     */
     enum class Expansions_searchStream(val value: kotlin.String) {
         @SerialName(value = "author_id") authorId("author_id"),
         @SerialName(value = "referenced_tweets.id") referencedTweetsPeriodId("referenced_tweets.id"),
         @SerialName(value = "in_reply_to_user_id") inReplyToUserId("in_reply_to_user_id"),
         @SerialName(value = "geo.place_id") geoPeriodPlaceId("geo.place_id"),
         @SerialName(value = "attachments.media_keys") attachmentsPeriodMediaKeys("attachments.media_keys"),
         @SerialName(value = "attachments.poll_ids") attachmentsPeriodPollIds("attachments.poll_ids"),
         @SerialName(value = "entities.mentions.username") entitiesPeriodMentionsPeriodUsername("entities.mentions.username"),
         @SerialName(value = "referenced_tweets.id.author_id") referencedTweetsPeriodIdPeriodAuthorId("referenced_tweets.id.author_id"),
         ;
     }

    /**
     * enum for parameter tweetFields
     */
     enum class TweetFields_searchStream(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "created_at") createdAt("created_at"),
         @SerialName(value = "text") text("text"),
         @SerialName(value = "author_id") authorId("author_id"),
         @SerialName(value = "in_reply_to_user_id") inReplyToUserId("in_reply_to_user_id"),
         @SerialName(value = "referenced_tweets") referencedTweets("referenced_tweets"),
         @SerialName(value = "attachments") attachments("attachments"),
         @SerialName(value = "withheld") withheld("withheld"),
         @SerialName(value = "geo") geo("geo"),
         @SerialName(value = "entities") entities("entities"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         @SerialName(value = "possibly_sensitive") possiblySensitive("possibly_sensitive"),
         @SerialName(value = "source") source("source"),
         @SerialName(value = "lang") lang("lang"),
         @SerialName(value = "context_annotations") contextAnnotations("context_annotations"),
         @SerialName(value = "non_public_metrics") nonPublicMetrics("non_public_metrics"),
         @SerialName(value = "promoted_metrics") promotedMetrics("promoted_metrics"),
         @SerialName(value = "organic_metrics") organicMetrics("organic_metrics"),
         @SerialName(value = "conversation_id") conversationId("conversation_id"),
         @SerialName(value = "reply_settings") replySettings("reply_settings"),
         ;
     }

    /**
     * enum for parameter userFields
     */
     enum class UserFields_searchStream(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "created_at") createdAt("created_at"),
         @SerialName(value = "name") name("name"),
         @SerialName(value = "username") username("username"),
         @SerialName(value = "protected") `protected`("protected"),
         @SerialName(value = "verified") verified("verified"),
         @SerialName(value = "withheld") withheld("withheld"),
         @SerialName(value = "profile_image_url") profileImageUrl("profile_image_url"),
         @SerialName(value = "location") location("location"),
         @SerialName(value = "url") url("url"),
         @SerialName(value = "description") description("description"),
         @SerialName(value = "entities") entities("entities"),
         @SerialName(value = "pinned_tweet_id") pinnedTweetId("pinned_tweet_id"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         ;
     }

    /**
     * enum for parameter mediaFields
     */
     enum class MediaFields_searchStream(val value: kotlin.String) {
         @SerialName(value = "media_key") mediaKey("media_key"),
         @SerialName(value = "duration_ms") durationMs("duration_ms"),
         @SerialName(value = "height") height("height"),
         @SerialName(value = "preview_image_url") previewImageUrl("preview_image_url"),
         @SerialName(value = "type") type("type"),
         @SerialName(value = "url") url("url"),
         @SerialName(value = "width") width("width"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         @SerialName(value = "non_public_metrics") nonPublicMetrics("non_public_metrics"),
         @SerialName(value = "organic_metrics") organicMetrics("organic_metrics"),
         @SerialName(value = "promoted_metrics") promotedMetrics("promoted_metrics"),
         @SerialName(value = "alt_text") altText("alt_text"),
         @SerialName(value = "variants") variants("variants"),
         ;
     }

    /**
     * enum for parameter placeFields
     */
     enum class PlaceFields_searchStream(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "name") name("name"),
         @SerialName(value = "country_code") countryCode("country_code"),
         @SerialName(value = "place_type") placeType("place_type"),
         @SerialName(value = "full_name") fullName("full_name"),
         @SerialName(value = "country") country("country"),
         @SerialName(value = "contained_within") containedWithin("contained_within"),
         @SerialName(value = "geo") geo("geo"),
         ;
     }

    /**
     * enum for parameter pollFields
     */
     enum class PollFields_searchStream(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "options") options("options"),
         @SerialName(value = "voting_status") votingStatus("voting_status"),
         @SerialName(value = "end_datetime") endDatetime("end_datetime"),
         @SerialName(value = "duration_minutes") durationMinutes("duration_minutes"),
         ;
     }

    /**
    * Filtered stream
    * Streams Tweets matching the stream&#39;s active rule set.
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param tweetFields A comma separated list of Tweet fields to display. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @param mediaFields A comma separated list of Media fields to display. (optional)
    * @param placeFields A comma separated list of Place fields to display. (optional)
    * @param pollFields A comma separated list of Poll fields to display. (optional)
    * @param backfillMinutes The number of minutes of backfill requested (optional)
    * @return FilteredStreamingTweetEntity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun searchStream(expansions: kotlin.collections.List<Expansions_searchStream>?, tweetFields: kotlin.collections.List<TweetFields_searchStream>?, userFields: kotlin.collections.List<UserFields_searchStream>?, mediaFields: kotlin.collections.List<MediaFields_searchStream>?, placeFields: kotlin.collections.List<PlaceFields_searchStream>?, pollFields: kotlin.collections.List<PollFields_searchStream>?, backfillMinutes: kotlin.Int?) : FilteredStreamingTweetEntity {
        val localVarResponse = searchStreamWithHttpInfo(expansions = expansions, tweetFields = tweetFields, userFields = userFields, mediaFields = mediaFields, placeFields = placeFields, pollFields = pollFields, backfillMinutes = backfillMinutes)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FilteredStreamingTweetEntity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Filtered stream
    * Streams Tweets matching the stream&#39;s active rule set.
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param tweetFields A comma separated list of Tweet fields to display. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @param mediaFields A comma separated list of Media fields to display. (optional)
    * @param placeFields A comma separated list of Place fields to display. (optional)
    * @param pollFields A comma separated list of Poll fields to display. (optional)
    * @param backfillMinutes The number of minutes of backfill requested (optional)
    * @return ApiResponse<FilteredStreamingTweetEntity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun searchStreamWithHttpInfo(expansions: kotlin.collections.List<Expansions_searchStream>?, tweetFields: kotlin.collections.List<TweetFields_searchStream>?, userFields: kotlin.collections.List<UserFields_searchStream>?, mediaFields: kotlin.collections.List<MediaFields_searchStream>?, placeFields: kotlin.collections.List<PlaceFields_searchStream>?, pollFields: kotlin.collections.List<PollFields_searchStream>?, backfillMinutes: kotlin.Int?) : ApiResponse<FilteredStreamingTweetEntity?> {
        val localVariableConfig = searchStreamRequestConfig(expansions = expansions, tweetFields = tweetFields, userFields = userFields, mediaFields = mediaFields, placeFields = placeFields, pollFields = pollFields, backfillMinutes = backfillMinutes)

        return request<Unit, FilteredStreamingTweetEntity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation searchStream
    *
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param tweetFields A comma separated list of Tweet fields to display. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @param mediaFields A comma separated list of Media fields to display. (optional)
    * @param placeFields A comma separated list of Place fields to display. (optional)
    * @param pollFields A comma separated list of Poll fields to display. (optional)
    * @param backfillMinutes The number of minutes of backfill requested (optional)
    * @return RequestConfig
    */
    fun searchStreamRequestConfig(expansions: kotlin.collections.List<Expansions_searchStream>?, tweetFields: kotlin.collections.List<TweetFields_searchStream>?, userFields: kotlin.collections.List<UserFields_searchStream>?, mediaFields: kotlin.collections.List<MediaFields_searchStream>?, placeFields: kotlin.collections.List<PlaceFields_searchStream>?, pollFields: kotlin.collections.List<PollFields_searchStream>?, backfillMinutes: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (expansions != null) {
                    put("expansions", toMultiValue(expansions.toList(), "csv"))
                }
                if (tweetFields != null) {
                    put("tweet.fields", toMultiValue(tweetFields.toList(), "csv"))
                }
                if (userFields != null) {
                    put("user.fields", toMultiValue(userFields.toList(), "csv"))
                }
                if (mediaFields != null) {
                    put("media.fields", toMultiValue(mediaFields.toList(), "csv"))
                }
                if (placeFields != null) {
                    put("place.fields", toMultiValue(placeFields.toList(), "csv"))
                }
                if (pollFields != null) {
                    put("poll.fields", toMultiValue(pollFields.toList(), "csv"))
                }
                if (backfillMinutes != null) {
                    put("backfill_minutes", listOf(backfillMinutes.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/tweets/search/stream",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter userFields
     */
     enum class UserFields_spaceBuyers(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "created_at") createdAt("created_at"),
         @SerialName(value = "name") name("name"),
         @SerialName(value = "username") username("username"),
         @SerialName(value = "protected") `protected`("protected"),
         @SerialName(value = "verified") verified("verified"),
         @SerialName(value = "withheld") withheld("withheld"),
         @SerialName(value = "profile_image_url") profileImageUrl("profile_image_url"),
         @SerialName(value = "location") location("location"),
         @SerialName(value = "url") url("url"),
         @SerialName(value = "description") description("description"),
         @SerialName(value = "entities") entities("entities"),
         @SerialName(value = "pinned_tweet_id") pinnedTweetId("pinned_tweet_id"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         ;
     }

    /**
    * Retrieve the list of users who purchased a ticket to the given space
    * Retrieves the list of users who purchased a ticket to the given space
    * @param id The space id from which tweets will be retrieved 
    * @param userFields A comma separated list of User fields to display. (optional)
    * @return MultiUserLookupResponseEntity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun spaceBuyers(id: kotlin.String, userFields: kotlin.collections.List<UserFields_spaceBuyers>?) : MultiUserLookupResponseEntity {
        val localVarResponse = spaceBuyersWithHttpInfo(id = id, userFields = userFields)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MultiUserLookupResponseEntity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Retrieve the list of users who purchased a ticket to the given space
    * Retrieves the list of users who purchased a ticket to the given space
    * @param id The space id from which tweets will be retrieved 
    * @param userFields A comma separated list of User fields to display. (optional)
    * @return ApiResponse<MultiUserLookupResponseEntity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun spaceBuyersWithHttpInfo(id: kotlin.String, userFields: kotlin.collections.List<UserFields_spaceBuyers>?) : ApiResponse<MultiUserLookupResponseEntity?> {
        val localVariableConfig = spaceBuyersRequestConfig(id = id, userFields = userFields)

        return request<Unit, MultiUserLookupResponseEntity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation spaceBuyers
    *
    * @param id The space id from which tweets will be retrieved 
    * @param userFields A comma separated list of User fields to display. (optional)
    * @return RequestConfig
    */
    fun spaceBuyersRequestConfig(id: kotlin.String, userFields: kotlin.collections.List<UserFields_spaceBuyers>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (userFields != null) {
                    put("user.fields", toMultiValue(userFields.toList(), "csv"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/spaces/{id}/buyers".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter tweetFields
     */
     enum class TweetFields_spaceTweets(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "created_at") createdAt("created_at"),
         @SerialName(value = "text") text("text"),
         @SerialName(value = "author_id") authorId("author_id"),
         @SerialName(value = "in_reply_to_user_id") inReplyToUserId("in_reply_to_user_id"),
         @SerialName(value = "referenced_tweets") referencedTweets("referenced_tweets"),
         @SerialName(value = "attachments") attachments("attachments"),
         @SerialName(value = "withheld") withheld("withheld"),
         @SerialName(value = "geo") geo("geo"),
         @SerialName(value = "entities") entities("entities"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         @SerialName(value = "possibly_sensitive") possiblySensitive("possibly_sensitive"),
         @SerialName(value = "source") source("source"),
         @SerialName(value = "lang") lang("lang"),
         @SerialName(value = "context_annotations") contextAnnotations("context_annotations"),
         @SerialName(value = "non_public_metrics") nonPublicMetrics("non_public_metrics"),
         @SerialName(value = "promoted_metrics") promotedMetrics("promoted_metrics"),
         @SerialName(value = "organic_metrics") organicMetrics("organic_metrics"),
         @SerialName(value = "conversation_id") conversationId("conversation_id"),
         @SerialName(value = "reply_settings") replySettings("reply_settings"),
         ;
     }

    /**
    * Retrieve tweets from a Space
    * Retrieves tweets shared in the specified space
    * @param id The space id from which tweets will be retrieved 
    * @param maxResults The number of tweets to fetch from the provided space. If not provided, the value will default to the maximum of 100 (optional)
    * @param tweetFields A comma separated list of Tweet fields to display. (optional)
    * @return MultiTweetLookupResponseEntity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun spaceTweets(id: kotlin.String, maxResults: kotlin.Int?, tweetFields: kotlin.collections.List<TweetFields_spaceTweets>?) : MultiTweetLookupResponseEntity {
        val localVarResponse = spaceTweetsWithHttpInfo(id = id, maxResults = maxResults, tweetFields = tweetFields)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MultiTweetLookupResponseEntity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Retrieve tweets from a Space
    * Retrieves tweets shared in the specified space
    * @param id The space id from which tweets will be retrieved 
    * @param maxResults The number of tweets to fetch from the provided space. If not provided, the value will default to the maximum of 100 (optional)
    * @param tweetFields A comma separated list of Tweet fields to display. (optional)
    * @return ApiResponse<MultiTweetLookupResponseEntity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun spaceTweetsWithHttpInfo(id: kotlin.String, maxResults: kotlin.Int?, tweetFields: kotlin.collections.List<TweetFields_spaceTweets>?) : ApiResponse<MultiTweetLookupResponseEntity?> {
        val localVariableConfig = spaceTweetsRequestConfig(id = id, maxResults = maxResults, tweetFields = tweetFields)

        return request<Unit, MultiTweetLookupResponseEntity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation spaceTweets
    *
    * @param id The space id from which tweets will be retrieved 
    * @param maxResults The number of tweets to fetch from the provided space. If not provided, the value will default to the maximum of 100 (optional)
    * @param tweetFields A comma separated list of Tweet fields to display. (optional)
    * @return RequestConfig
    */
    fun spaceTweetsRequestConfig(id: kotlin.String, maxResults: kotlin.Int?, tweetFields: kotlin.collections.List<TweetFields_spaceTweets>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (maxResults != null) {
                    put("max_results", listOf(maxResults.toString()))
                }
                if (tweetFields != null) {
                    put("tweet.fields", toMultiValue(tweetFields.toList(), "csv"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/spaces/{id}/tweets".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Full archive search counts
    * Returns Tweet Counts that match a search query.
    * @param query One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length 
    * @param startTime YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp (from most recent 7 days) from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)
    * @param endTime YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)
    * @param sinceId Returns results with a Tweet ID greater than (that is, more recent than) the specified ID. (optional)
    * @param untilId Returns results with a Tweet ID less than (that is, older than) the specified ID. (optional)
    * @param nextToken This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
    * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
    * @param granularity The granularity for the search counts results. (optional, default to hour)
    * @return TweetCountsResponseEntity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun tweetCountsFullArchiveSearch(query: kotlin.String, startTime: java.time.OffsetDateTime?, endTime: java.time.OffsetDateTime?, sinceId: kotlin.String?, untilId: kotlin.String?, nextToken: kotlin.String?, paginationToken: kotlin.String?, granularity: GranularityEntity?) : TweetCountsResponseEntity {
        val localVarResponse = tweetCountsFullArchiveSearchWithHttpInfo(query = query, startTime = startTime, endTime = endTime, sinceId = sinceId, untilId = untilId, nextToken = nextToken, paginationToken = paginationToken, granularity = granularity)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TweetCountsResponseEntity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Full archive search counts
    * Returns Tweet Counts that match a search query.
    * @param query One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length 
    * @param startTime YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp (from most recent 7 days) from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)
    * @param endTime YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)
    * @param sinceId Returns results with a Tweet ID greater than (that is, more recent than) the specified ID. (optional)
    * @param untilId Returns results with a Tweet ID less than (that is, older than) the specified ID. (optional)
    * @param nextToken This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
    * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
    * @param granularity The granularity for the search counts results. (optional, default to hour)
    * @return ApiResponse<TweetCountsResponseEntity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun tweetCountsFullArchiveSearchWithHttpInfo(query: kotlin.String, startTime: java.time.OffsetDateTime?, endTime: java.time.OffsetDateTime?, sinceId: kotlin.String?, untilId: kotlin.String?, nextToken: kotlin.String?, paginationToken: kotlin.String?, granularity: GranularityEntity?) : ApiResponse<TweetCountsResponseEntity?> {
        val localVariableConfig = tweetCountsFullArchiveSearchRequestConfig(query = query, startTime = startTime, endTime = endTime, sinceId = sinceId, untilId = untilId, nextToken = nextToken, paginationToken = paginationToken, granularity = granularity)

        return request<Unit, TweetCountsResponseEntity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation tweetCountsFullArchiveSearch
    *
    * @param query One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length 
    * @param startTime YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp (from most recent 7 days) from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)
    * @param endTime YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)
    * @param sinceId Returns results with a Tweet ID greater than (that is, more recent than) the specified ID. (optional)
    * @param untilId Returns results with a Tweet ID less than (that is, older than) the specified ID. (optional)
    * @param nextToken This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
    * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
    * @param granularity The granularity for the search counts results. (optional, default to hour)
    * @return RequestConfig
    */
    fun tweetCountsFullArchiveSearchRequestConfig(query: kotlin.String, startTime: java.time.OffsetDateTime?, endTime: java.time.OffsetDateTime?, sinceId: kotlin.String?, untilId: kotlin.String?, nextToken: kotlin.String?, paginationToken: kotlin.String?, granularity: GranularityEntity?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("query", listOf(query.toString()))
                if (startTime != null) {
                    put("start_time", listOf(parseDateToQueryString(startTime)))
                }
                if (endTime != null) {
                    put("end_time", listOf(parseDateToQueryString(endTime)))
                }
                if (sinceId != null) {
                    put("since_id", listOf(sinceId.toString()))
                }
                if (untilId != null) {
                    put("until_id", listOf(untilId.toString()))
                }
                if (nextToken != null) {
                    put("next_token", listOf(nextToken.toString()))
                }
                if (paginationToken != null) {
                    put("pagination_token", listOf(paginationToken.toString()))
                }
                if (granularity != null) {
                    put("granularity", listOf(granularity.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/tweets/counts/all",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Recent search counts
    * Returns Tweet Counts from the last 7 days that match a search query.
    * @param query One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length 
    * @param startTime YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp (from most recent 7 days) from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)
    * @param endTime YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)
    * @param sinceId Returns results with a Tweet ID greater than (that is, more recent than) the specified ID. (optional)
    * @param untilId Returns results with a Tweet ID less than (that is, older than) the specified ID. (optional)
    * @param nextToken This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
    * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
    * @param granularity The granularity for the search counts results. (optional, default to hour)
    * @return TweetCountsResponseEntity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun tweetCountsRecentSearch(query: kotlin.String, startTime: java.time.OffsetDateTime?, endTime: java.time.OffsetDateTime?, sinceId: kotlin.String?, untilId: kotlin.String?, nextToken: kotlin.String?, paginationToken: kotlin.String?, granularity: GranularityEntity?) : TweetCountsResponseEntity {
        val localVarResponse = tweetCountsRecentSearchWithHttpInfo(query = query, startTime = startTime, endTime = endTime, sinceId = sinceId, untilId = untilId, nextToken = nextToken, paginationToken = paginationToken, granularity = granularity)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TweetCountsResponseEntity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Recent search counts
    * Returns Tweet Counts from the last 7 days that match a search query.
    * @param query One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length 
    * @param startTime YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp (from most recent 7 days) from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)
    * @param endTime YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)
    * @param sinceId Returns results with a Tweet ID greater than (that is, more recent than) the specified ID. (optional)
    * @param untilId Returns results with a Tweet ID less than (that is, older than) the specified ID. (optional)
    * @param nextToken This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
    * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
    * @param granularity The granularity for the search counts results. (optional, default to hour)
    * @return ApiResponse<TweetCountsResponseEntity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun tweetCountsRecentSearchWithHttpInfo(query: kotlin.String, startTime: java.time.OffsetDateTime?, endTime: java.time.OffsetDateTime?, sinceId: kotlin.String?, untilId: kotlin.String?, nextToken: kotlin.String?, paginationToken: kotlin.String?, granularity: GranularityEntity?) : ApiResponse<TweetCountsResponseEntity?> {
        val localVariableConfig = tweetCountsRecentSearchRequestConfig(query = query, startTime = startTime, endTime = endTime, sinceId = sinceId, untilId = untilId, nextToken = nextToken, paginationToken = paginationToken, granularity = granularity)

        return request<Unit, TweetCountsResponseEntity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation tweetCountsRecentSearch
    *
    * @param query One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length 
    * @param startTime YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp (from most recent 7 days) from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)
    * @param endTime YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)
    * @param sinceId Returns results with a Tweet ID greater than (that is, more recent than) the specified ID. (optional)
    * @param untilId Returns results with a Tweet ID less than (that is, older than) the specified ID. (optional)
    * @param nextToken This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
    * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
    * @param granularity The granularity for the search counts results. (optional, default to hour)
    * @return RequestConfig
    */
    fun tweetCountsRecentSearchRequestConfig(query: kotlin.String, startTime: java.time.OffsetDateTime?, endTime: java.time.OffsetDateTime?, sinceId: kotlin.String?, untilId: kotlin.String?, nextToken: kotlin.String?, paginationToken: kotlin.String?, granularity: GranularityEntity?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("query", listOf(query.toString()))
                if (startTime != null) {
                    put("start_time", listOf(parseDateToQueryString(startTime)))
                }
                if (endTime != null) {
                    put("end_time", listOf(parseDateToQueryString(endTime)))
                }
                if (sinceId != null) {
                    put("since_id", listOf(sinceId.toString()))
                }
                if (untilId != null) {
                    put("until_id", listOf(untilId.toString()))
                }
                if (nextToken != null) {
                    put("next_token", listOf(nextToken.toString()))
                }
                if (paginationToken != null) {
                    put("pagination_token", listOf(paginationToken.toString()))
                }
                if (granularity != null) {
                    put("granularity", listOf(granularity.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/tweets/counts/recent",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter sortOrder
     */
     enum class SortOrder_tweetsFullarchiveSearch(val value: kotlin.String) {
         @SerialName(value = "recency") recency("recency"),
         @SerialName(value = "relevancy") relevancy("relevancy"),
         ;
     }

    /**
     * enum for parameter expansions
     */
     enum class Expansions_tweetsFullarchiveSearch(val value: kotlin.String) {
         @SerialName(value = "author_id") authorId("author_id"),
         @SerialName(value = "referenced_tweets.id") referencedTweetsPeriodId("referenced_tweets.id"),
         @SerialName(value = "in_reply_to_user_id") inReplyToUserId("in_reply_to_user_id"),
         @SerialName(value = "geo.place_id") geoPeriodPlaceId("geo.place_id"),
         @SerialName(value = "attachments.media_keys") attachmentsPeriodMediaKeys("attachments.media_keys"),
         @SerialName(value = "attachments.poll_ids") attachmentsPeriodPollIds("attachments.poll_ids"),
         @SerialName(value = "entities.mentions.username") entitiesPeriodMentionsPeriodUsername("entities.mentions.username"),
         @SerialName(value = "referenced_tweets.id.author_id") referencedTweetsPeriodIdPeriodAuthorId("referenced_tweets.id.author_id"),
         ;
     }

    /**
     * enum for parameter tweetFields
     */
     enum class TweetFields_tweetsFullarchiveSearch(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "created_at") createdAt("created_at"),
         @SerialName(value = "text") text("text"),
         @SerialName(value = "author_id") authorId("author_id"),
         @SerialName(value = "in_reply_to_user_id") inReplyToUserId("in_reply_to_user_id"),
         @SerialName(value = "referenced_tweets") referencedTweets("referenced_tweets"),
         @SerialName(value = "attachments") attachments("attachments"),
         @SerialName(value = "withheld") withheld("withheld"),
         @SerialName(value = "geo") geo("geo"),
         @SerialName(value = "entities") entities("entities"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         @SerialName(value = "possibly_sensitive") possiblySensitive("possibly_sensitive"),
         @SerialName(value = "source") source("source"),
         @SerialName(value = "lang") lang("lang"),
         @SerialName(value = "context_annotations") contextAnnotations("context_annotations"),
         @SerialName(value = "non_public_metrics") nonPublicMetrics("non_public_metrics"),
         @SerialName(value = "promoted_metrics") promotedMetrics("promoted_metrics"),
         @SerialName(value = "organic_metrics") organicMetrics("organic_metrics"),
         @SerialName(value = "conversation_id") conversationId("conversation_id"),
         @SerialName(value = "reply_settings") replySettings("reply_settings"),
         ;
     }

    /**
     * enum for parameter userFields
     */
     enum class UserFields_tweetsFullarchiveSearch(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "created_at") createdAt("created_at"),
         @SerialName(value = "name") name("name"),
         @SerialName(value = "username") username("username"),
         @SerialName(value = "protected") `protected`("protected"),
         @SerialName(value = "verified") verified("verified"),
         @SerialName(value = "withheld") withheld("withheld"),
         @SerialName(value = "profile_image_url") profileImageUrl("profile_image_url"),
         @SerialName(value = "location") location("location"),
         @SerialName(value = "url") url("url"),
         @SerialName(value = "description") description("description"),
         @SerialName(value = "entities") entities("entities"),
         @SerialName(value = "pinned_tweet_id") pinnedTweetId("pinned_tweet_id"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         ;
     }

    /**
     * enum for parameter mediaFields
     */
     enum class MediaFields_tweetsFullarchiveSearch(val value: kotlin.String) {
         @SerialName(value = "media_key") mediaKey("media_key"),
         @SerialName(value = "duration_ms") durationMs("duration_ms"),
         @SerialName(value = "height") height("height"),
         @SerialName(value = "preview_image_url") previewImageUrl("preview_image_url"),
         @SerialName(value = "type") type("type"),
         @SerialName(value = "url") url("url"),
         @SerialName(value = "width") width("width"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         @SerialName(value = "non_public_metrics") nonPublicMetrics("non_public_metrics"),
         @SerialName(value = "organic_metrics") organicMetrics("organic_metrics"),
         @SerialName(value = "promoted_metrics") promotedMetrics("promoted_metrics"),
         @SerialName(value = "alt_text") altText("alt_text"),
         @SerialName(value = "variants") variants("variants"),
         ;
     }

    /**
     * enum for parameter placeFields
     */
     enum class PlaceFields_tweetsFullarchiveSearch(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "name") name("name"),
         @SerialName(value = "country_code") countryCode("country_code"),
         @SerialName(value = "place_type") placeType("place_type"),
         @SerialName(value = "full_name") fullName("full_name"),
         @SerialName(value = "country") country("country"),
         @SerialName(value = "contained_within") containedWithin("contained_within"),
         @SerialName(value = "geo") geo("geo"),
         ;
     }

    /**
     * enum for parameter pollFields
     */
     enum class PollFields_tweetsFullarchiveSearch(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "options") options("options"),
         @SerialName(value = "voting_status") votingStatus("voting_status"),
         @SerialName(value = "end_datetime") endDatetime("end_datetime"),
         @SerialName(value = "duration_minutes") durationMinutes("duration_minutes"),
         ;
     }

    /**
    * Full-archive search
    * Returns Tweets that match a search query.
    * @param query One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length 
    * @param startTime YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)
    * @param endTime YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)
    * @param sinceId Returns results with a Tweet ID greater than (that is, more recent than) the specified ID. (optional)
    * @param untilId Returns results with a Tweet ID less than (that is, older than) the specified ID. (optional)
    * @param maxResults The maximum number of search results to be returned by a request. (optional, default to 10)
    * @param sortOrder This order in which to return results. (optional)
    * @param nextToken This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
    * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param tweetFields A comma separated list of Tweet fields to display. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @param mediaFields A comma separated list of Media fields to display. (optional)
    * @param placeFields A comma separated list of Place fields to display. (optional)
    * @param pollFields A comma separated list of Poll fields to display. (optional)
    * @return TweetSearchResponseEntity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun tweetsFullarchiveSearch(query: kotlin.String, startTime: java.time.OffsetDateTime?, endTime: java.time.OffsetDateTime?, sinceId: kotlin.String?, untilId: kotlin.String?, maxResults: kotlin.Int?, sortOrder: SortOrder_tweetsFullarchiveSearch?, nextToken: kotlin.String?, paginationToken: kotlin.String?, expansions: kotlin.collections.List<Expansions_tweetsFullarchiveSearch>?, tweetFields: kotlin.collections.List<TweetFields_tweetsFullarchiveSearch>?, userFields: kotlin.collections.List<UserFields_tweetsFullarchiveSearch>?, mediaFields: kotlin.collections.List<MediaFields_tweetsFullarchiveSearch>?, placeFields: kotlin.collections.List<PlaceFields_tweetsFullarchiveSearch>?, pollFields: kotlin.collections.List<PollFields_tweetsFullarchiveSearch>?) : TweetSearchResponseEntity {
        val localVarResponse = tweetsFullarchiveSearchWithHttpInfo(query = query, startTime = startTime, endTime = endTime, sinceId = sinceId, untilId = untilId, maxResults = maxResults, sortOrder = sortOrder, nextToken = nextToken, paginationToken = paginationToken, expansions = expansions, tweetFields = tweetFields, userFields = userFields, mediaFields = mediaFields, placeFields = placeFields, pollFields = pollFields)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TweetSearchResponseEntity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Full-archive search
    * Returns Tweets that match a search query.
    * @param query One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length 
    * @param startTime YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)
    * @param endTime YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)
    * @param sinceId Returns results with a Tweet ID greater than (that is, more recent than) the specified ID. (optional)
    * @param untilId Returns results with a Tweet ID less than (that is, older than) the specified ID. (optional)
    * @param maxResults The maximum number of search results to be returned by a request. (optional, default to 10)
    * @param sortOrder This order in which to return results. (optional)
    * @param nextToken This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
    * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param tweetFields A comma separated list of Tweet fields to display. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @param mediaFields A comma separated list of Media fields to display. (optional)
    * @param placeFields A comma separated list of Place fields to display. (optional)
    * @param pollFields A comma separated list of Poll fields to display. (optional)
    * @return ApiResponse<TweetSearchResponseEntity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun tweetsFullarchiveSearchWithHttpInfo(query: kotlin.String, startTime: java.time.OffsetDateTime?, endTime: java.time.OffsetDateTime?, sinceId: kotlin.String?, untilId: kotlin.String?, maxResults: kotlin.Int?, sortOrder: SortOrder_tweetsFullarchiveSearch?, nextToken: kotlin.String?, paginationToken: kotlin.String?, expansions: kotlin.collections.List<Expansions_tweetsFullarchiveSearch>?, tweetFields: kotlin.collections.List<TweetFields_tweetsFullarchiveSearch>?, userFields: kotlin.collections.List<UserFields_tweetsFullarchiveSearch>?, mediaFields: kotlin.collections.List<MediaFields_tweetsFullarchiveSearch>?, placeFields: kotlin.collections.List<PlaceFields_tweetsFullarchiveSearch>?, pollFields: kotlin.collections.List<PollFields_tweetsFullarchiveSearch>?) : ApiResponse<TweetSearchResponseEntity?> {
        val localVariableConfig = tweetsFullarchiveSearchRequestConfig(query = query, startTime = startTime, endTime = endTime, sinceId = sinceId, untilId = untilId, maxResults = maxResults, sortOrder = sortOrder, nextToken = nextToken, paginationToken = paginationToken, expansions = expansions, tweetFields = tweetFields, userFields = userFields, mediaFields = mediaFields, placeFields = placeFields, pollFields = pollFields)

        return request<Unit, TweetSearchResponseEntity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation tweetsFullarchiveSearch
    *
    * @param query One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length 
    * @param startTime YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)
    * @param endTime YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)
    * @param sinceId Returns results with a Tweet ID greater than (that is, more recent than) the specified ID. (optional)
    * @param untilId Returns results with a Tweet ID less than (that is, older than) the specified ID. (optional)
    * @param maxResults The maximum number of search results to be returned by a request. (optional, default to 10)
    * @param sortOrder This order in which to return results. (optional)
    * @param nextToken This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
    * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param tweetFields A comma separated list of Tweet fields to display. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @param mediaFields A comma separated list of Media fields to display. (optional)
    * @param placeFields A comma separated list of Place fields to display. (optional)
    * @param pollFields A comma separated list of Poll fields to display. (optional)
    * @return RequestConfig
    */
    fun tweetsFullarchiveSearchRequestConfig(query: kotlin.String, startTime: java.time.OffsetDateTime?, endTime: java.time.OffsetDateTime?, sinceId: kotlin.String?, untilId: kotlin.String?, maxResults: kotlin.Int?, sortOrder: SortOrder_tweetsFullarchiveSearch?, nextToken: kotlin.String?, paginationToken: kotlin.String?, expansions: kotlin.collections.List<Expansions_tweetsFullarchiveSearch>?, tweetFields: kotlin.collections.List<TweetFields_tweetsFullarchiveSearch>?, userFields: kotlin.collections.List<UserFields_tweetsFullarchiveSearch>?, mediaFields: kotlin.collections.List<MediaFields_tweetsFullarchiveSearch>?, placeFields: kotlin.collections.List<PlaceFields_tweetsFullarchiveSearch>?, pollFields: kotlin.collections.List<PollFields_tweetsFullarchiveSearch>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("query", listOf(query.toString()))
                if (startTime != null) {
                    put("start_time", listOf(parseDateToQueryString(startTime)))
                }
                if (endTime != null) {
                    put("end_time", listOf(parseDateToQueryString(endTime)))
                }
                if (sinceId != null) {
                    put("since_id", listOf(sinceId.toString()))
                }
                if (untilId != null) {
                    put("until_id", listOf(untilId.toString()))
                }
                if (maxResults != null) {
                    put("max_results", listOf(maxResults.toString()))
                }
                if (sortOrder != null) {
                    put("sort_order", listOf(sortOrder.toString()))
                }
                if (nextToken != null) {
                    put("next_token", listOf(nextToken.toString()))
                }
                if (paginationToken != null) {
                    put("pagination_token", listOf(paginationToken.toString()))
                }
                if (expansions != null) {
                    put("expansions", toMultiValue(expansions.toList(), "csv"))
                }
                if (tweetFields != null) {
                    put("tweet.fields", toMultiValue(tweetFields.toList(), "csv"))
                }
                if (userFields != null) {
                    put("user.fields", toMultiValue(userFields.toList(), "csv"))
                }
                if (mediaFields != null) {
                    put("media.fields", toMultiValue(mediaFields.toList(), "csv"))
                }
                if (placeFields != null) {
                    put("place.fields", toMultiValue(placeFields.toList(), "csv"))
                }
                if (pollFields != null) {
                    put("poll.fields", toMultiValue(pollFields.toList(), "csv"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/tweets/search/all",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter sortOrder
     */
     enum class SortOrder_tweetsRecentSearch(val value: kotlin.String) {
         @SerialName(value = "recency") recency("recency"),
         @SerialName(value = "relevancy") relevancy("relevancy"),
         ;
     }

    /**
     * enum for parameter expansions
     */
     enum class Expansions_tweetsRecentSearch(val value: kotlin.String) {
         @SerialName(value = "author_id") authorId("author_id"),
         @SerialName(value = "referenced_tweets.id") referencedTweetsPeriodId("referenced_tweets.id"),
         @SerialName(value = "in_reply_to_user_id") inReplyToUserId("in_reply_to_user_id"),
         @SerialName(value = "geo.place_id") geoPeriodPlaceId("geo.place_id"),
         @SerialName(value = "attachments.media_keys") attachmentsPeriodMediaKeys("attachments.media_keys"),
         @SerialName(value = "attachments.poll_ids") attachmentsPeriodPollIds("attachments.poll_ids"),
         @SerialName(value = "entities.mentions.username") entitiesPeriodMentionsPeriodUsername("entities.mentions.username"),
         @SerialName(value = "referenced_tweets.id.author_id") referencedTweetsPeriodIdPeriodAuthorId("referenced_tweets.id.author_id"),
         ;
     }

    /**
     * enum for parameter tweetFields
     */
     enum class TweetFields_tweetsRecentSearch(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "created_at") createdAt("created_at"),
         @SerialName(value = "text") text("text"),
         @SerialName(value = "author_id") authorId("author_id"),
         @SerialName(value = "in_reply_to_user_id") inReplyToUserId("in_reply_to_user_id"),
         @SerialName(value = "referenced_tweets") referencedTweets("referenced_tweets"),
         @SerialName(value = "attachments") attachments("attachments"),
         @SerialName(value = "withheld") withheld("withheld"),
         @SerialName(value = "geo") geo("geo"),
         @SerialName(value = "entities") entities("entities"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         @SerialName(value = "possibly_sensitive") possiblySensitive("possibly_sensitive"),
         @SerialName(value = "source") source("source"),
         @SerialName(value = "lang") lang("lang"),
         @SerialName(value = "context_annotations") contextAnnotations("context_annotations"),
         @SerialName(value = "non_public_metrics") nonPublicMetrics("non_public_metrics"),
         @SerialName(value = "promoted_metrics") promotedMetrics("promoted_metrics"),
         @SerialName(value = "organic_metrics") organicMetrics("organic_metrics"),
         @SerialName(value = "conversation_id") conversationId("conversation_id"),
         @SerialName(value = "reply_settings") replySettings("reply_settings"),
         ;
     }

    /**
     * enum for parameter userFields
     */
     enum class UserFields_tweetsRecentSearch(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "created_at") createdAt("created_at"),
         @SerialName(value = "name") name("name"),
         @SerialName(value = "username") username("username"),
         @SerialName(value = "protected") `protected`("protected"),
         @SerialName(value = "verified") verified("verified"),
         @SerialName(value = "withheld") withheld("withheld"),
         @SerialName(value = "profile_image_url") profileImageUrl("profile_image_url"),
         @SerialName(value = "location") location("location"),
         @SerialName(value = "url") url("url"),
         @SerialName(value = "description") description("description"),
         @SerialName(value = "entities") entities("entities"),
         @SerialName(value = "pinned_tweet_id") pinnedTweetId("pinned_tweet_id"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         ;
     }

    /**
     * enum for parameter mediaFields
     */
     enum class MediaFields_tweetsRecentSearch(val value: kotlin.String) {
         @SerialName(value = "media_key") mediaKey("media_key"),
         @SerialName(value = "duration_ms") durationMs("duration_ms"),
         @SerialName(value = "height") height("height"),
         @SerialName(value = "preview_image_url") previewImageUrl("preview_image_url"),
         @SerialName(value = "type") type("type"),
         @SerialName(value = "url") url("url"),
         @SerialName(value = "width") width("width"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         @SerialName(value = "non_public_metrics") nonPublicMetrics("non_public_metrics"),
         @SerialName(value = "organic_metrics") organicMetrics("organic_metrics"),
         @SerialName(value = "promoted_metrics") promotedMetrics("promoted_metrics"),
         @SerialName(value = "alt_text") altText("alt_text"),
         @SerialName(value = "variants") variants("variants"),
         ;
     }

    /**
     * enum for parameter placeFields
     */
     enum class PlaceFields_tweetsRecentSearch(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "name") name("name"),
         @SerialName(value = "country_code") countryCode("country_code"),
         @SerialName(value = "place_type") placeType("place_type"),
         @SerialName(value = "full_name") fullName("full_name"),
         @SerialName(value = "country") country("country"),
         @SerialName(value = "contained_within") containedWithin("contained_within"),
         @SerialName(value = "geo") geo("geo"),
         ;
     }

    /**
     * enum for parameter pollFields
     */
     enum class PollFields_tweetsRecentSearch(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "options") options("options"),
         @SerialName(value = "voting_status") votingStatus("voting_status"),
         @SerialName(value = "end_datetime") endDatetime("end_datetime"),
         @SerialName(value = "duration_minutes") durationMinutes("duration_minutes"),
         ;
     }

    /**
    * Recent search
    * Returns Tweets from the last 7 days that match a search query.
    * @param query One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length 
    * @param startTime YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp (from most recent 7 days) from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)
    * @param endTime YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)
    * @param sinceId Returns results with a Tweet ID greater than (that is, more recent than) the specified ID. (optional)
    * @param untilId Returns results with a Tweet ID less than (that is, older than) the specified ID. (optional)
    * @param maxResults The maximum number of search results to be returned by a request. (optional, default to 10)
    * @param sortOrder This order in which to return results. (optional)
    * @param nextToken This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
    * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param tweetFields A comma separated list of Tweet fields to display. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @param mediaFields A comma separated list of Media fields to display. (optional)
    * @param placeFields A comma separated list of Place fields to display. (optional)
    * @param pollFields A comma separated list of Poll fields to display. (optional)
    * @return TweetSearchResponseEntity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun tweetsRecentSearch(query: kotlin.String, startTime: java.time.OffsetDateTime?, endTime: java.time.OffsetDateTime?, sinceId: kotlin.String?, untilId: kotlin.String?, maxResults: kotlin.Int?, sortOrder: SortOrder_tweetsRecentSearch?, nextToken: kotlin.String?, paginationToken: kotlin.String?, expansions: kotlin.collections.List<Expansions_tweetsRecentSearch>?, tweetFields: kotlin.collections.List<TweetFields_tweetsRecentSearch>?, userFields: kotlin.collections.List<UserFields_tweetsRecentSearch>?, mediaFields: kotlin.collections.List<MediaFields_tweetsRecentSearch>?, placeFields: kotlin.collections.List<PlaceFields_tweetsRecentSearch>?, pollFields: kotlin.collections.List<PollFields_tweetsRecentSearch>?) : TweetSearchResponseEntity {
        val localVarResponse = tweetsRecentSearchWithHttpInfo(query = query, startTime = startTime, endTime = endTime, sinceId = sinceId, untilId = untilId, maxResults = maxResults, sortOrder = sortOrder, nextToken = nextToken, paginationToken = paginationToken, expansions = expansions, tweetFields = tweetFields, userFields = userFields, mediaFields = mediaFields, placeFields = placeFields, pollFields = pollFields)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TweetSearchResponseEntity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Recent search
    * Returns Tweets from the last 7 days that match a search query.
    * @param query One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length 
    * @param startTime YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp (from most recent 7 days) from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)
    * @param endTime YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)
    * @param sinceId Returns results with a Tweet ID greater than (that is, more recent than) the specified ID. (optional)
    * @param untilId Returns results with a Tweet ID less than (that is, older than) the specified ID. (optional)
    * @param maxResults The maximum number of search results to be returned by a request. (optional, default to 10)
    * @param sortOrder This order in which to return results. (optional)
    * @param nextToken This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
    * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param tweetFields A comma separated list of Tweet fields to display. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @param mediaFields A comma separated list of Media fields to display. (optional)
    * @param placeFields A comma separated list of Place fields to display. (optional)
    * @param pollFields A comma separated list of Poll fields to display. (optional)
    * @return ApiResponse<TweetSearchResponseEntity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun tweetsRecentSearchWithHttpInfo(query: kotlin.String, startTime: java.time.OffsetDateTime?, endTime: java.time.OffsetDateTime?, sinceId: kotlin.String?, untilId: kotlin.String?, maxResults: kotlin.Int?, sortOrder: SortOrder_tweetsRecentSearch?, nextToken: kotlin.String?, paginationToken: kotlin.String?, expansions: kotlin.collections.List<Expansions_tweetsRecentSearch>?, tweetFields: kotlin.collections.List<TweetFields_tweetsRecentSearch>?, userFields: kotlin.collections.List<UserFields_tweetsRecentSearch>?, mediaFields: kotlin.collections.List<MediaFields_tweetsRecentSearch>?, placeFields: kotlin.collections.List<PlaceFields_tweetsRecentSearch>?, pollFields: kotlin.collections.List<PollFields_tweetsRecentSearch>?) : ApiResponse<TweetSearchResponseEntity?> {
        val localVariableConfig = tweetsRecentSearchRequestConfig(query = query, startTime = startTime, endTime = endTime, sinceId = sinceId, untilId = untilId, maxResults = maxResults, sortOrder = sortOrder, nextToken = nextToken, paginationToken = paginationToken, expansions = expansions, tweetFields = tweetFields, userFields = userFields, mediaFields = mediaFields, placeFields = placeFields, pollFields = pollFields)

        return request<Unit, TweetSearchResponseEntity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation tweetsRecentSearch
    *
    * @param query One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length 
    * @param startTime YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp (from most recent 7 days) from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)
    * @param endTime YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)
    * @param sinceId Returns results with a Tweet ID greater than (that is, more recent than) the specified ID. (optional)
    * @param untilId Returns results with a Tweet ID less than (that is, older than) the specified ID. (optional)
    * @param maxResults The maximum number of search results to be returned by a request. (optional, default to 10)
    * @param sortOrder This order in which to return results. (optional)
    * @param nextToken This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
    * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param tweetFields A comma separated list of Tweet fields to display. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @param mediaFields A comma separated list of Media fields to display. (optional)
    * @param placeFields A comma separated list of Place fields to display. (optional)
    * @param pollFields A comma separated list of Poll fields to display. (optional)
    * @return RequestConfig
    */
    fun tweetsRecentSearchRequestConfig(query: kotlin.String, startTime: java.time.OffsetDateTime?, endTime: java.time.OffsetDateTime?, sinceId: kotlin.String?, untilId: kotlin.String?, maxResults: kotlin.Int?, sortOrder: SortOrder_tweetsRecentSearch?, nextToken: kotlin.String?, paginationToken: kotlin.String?, expansions: kotlin.collections.List<Expansions_tweetsRecentSearch>?, tweetFields: kotlin.collections.List<TweetFields_tweetsRecentSearch>?, userFields: kotlin.collections.List<UserFields_tweetsRecentSearch>?, mediaFields: kotlin.collections.List<MediaFields_tweetsRecentSearch>?, placeFields: kotlin.collections.List<PlaceFields_tweetsRecentSearch>?, pollFields: kotlin.collections.List<PollFields_tweetsRecentSearch>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("query", listOf(query.toString()))
                if (startTime != null) {
                    put("start_time", listOf(parseDateToQueryString(startTime)))
                }
                if (endTime != null) {
                    put("end_time", listOf(parseDateToQueryString(endTime)))
                }
                if (sinceId != null) {
                    put("since_id", listOf(sinceId.toString()))
                }
                if (untilId != null) {
                    put("until_id", listOf(untilId.toString()))
                }
                if (maxResults != null) {
                    put("max_results", listOf(maxResults.toString()))
                }
                if (sortOrder != null) {
                    put("sort_order", listOf(sortOrder.toString()))
                }
                if (nextToken != null) {
                    put("next_token", listOf(nextToken.toString()))
                }
                if (paginationToken != null) {
                    put("pagination_token", listOf(paginationToken.toString()))
                }
                if (expansions != null) {
                    put("expansions", toMultiValue(expansions.toList(), "csv"))
                }
                if (tweetFields != null) {
                    put("tweet.fields", toMultiValue(tweetFields.toList(), "csv"))
                }
                if (userFields != null) {
                    put("user.fields", toMultiValue(userFields.toList(), "csv"))
                }
                if (mediaFields != null) {
                    put("media.fields", toMultiValue(mediaFields.toList(), "csv"))
                }
                if (placeFields != null) {
                    put("place.fields", toMultiValue(placeFields.toList(), "csv"))
                }
                if (pollFields != null) {
                    put("poll.fields", toMultiValue(pollFields.toList(), "csv"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/tweets/search/recent",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Causes the user (in the path) to like the specified tweet
    * Causes the user (in the path) to like the specified tweet. The user in the path must match the user context authorizing the request.
    * @param id The ID of the user that is requesting to like the tweet 
    * @param usersLikesCreateRequestEntity  (optional)
    * @return UsersLikesCreateResponseEntity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usersIdLike(id: kotlin.String, usersLikesCreateRequestEntity: UsersLikesCreateRequestEntity?) : UsersLikesCreateResponseEntity {
        val localVarResponse = usersIdLikeWithHttpInfo(id = id, usersLikesCreateRequestEntity = usersLikesCreateRequestEntity)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsersLikesCreateResponseEntity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Causes the user (in the path) to like the specified tweet
    * Causes the user (in the path) to like the specified tweet. The user in the path must match the user context authorizing the request.
    * @param id The ID of the user that is requesting to like the tweet 
    * @param usersLikesCreateRequestEntity  (optional)
    * @return ApiResponse<UsersLikesCreateResponseEntity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usersIdLikeWithHttpInfo(id: kotlin.String, usersLikesCreateRequestEntity: UsersLikesCreateRequestEntity?) : ApiResponse<UsersLikesCreateResponseEntity?> {
        val localVariableConfig = usersIdLikeRequestConfig(id = id, usersLikesCreateRequestEntity = usersLikesCreateRequestEntity)

        return request<UsersLikesCreateRequestEntity, UsersLikesCreateResponseEntity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation usersIdLike
    *
    * @param id The ID of the user that is requesting to like the tweet 
    * @param usersLikesCreateRequestEntity  (optional)
    * @return RequestConfig
    */
    fun usersIdLikeRequestConfig(id: kotlin.String, usersLikesCreateRequestEntity: UsersLikesCreateRequestEntity?) : RequestConfig<UsersLikesCreateRequestEntity> {
        val localVariableBody = usersLikesCreateRequestEntity
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/2/users/{id}/likes".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter expansions
     */
     enum class Expansions_usersIdLikedTweets(val value: kotlin.String) {
         @SerialName(value = "author_id") authorId("author_id"),
         @SerialName(value = "referenced_tweets.id") referencedTweetsPeriodId("referenced_tweets.id"),
         @SerialName(value = "in_reply_to_user_id") inReplyToUserId("in_reply_to_user_id"),
         @SerialName(value = "geo.place_id") geoPeriodPlaceId("geo.place_id"),
         @SerialName(value = "attachments.media_keys") attachmentsPeriodMediaKeys("attachments.media_keys"),
         @SerialName(value = "attachments.poll_ids") attachmentsPeriodPollIds("attachments.poll_ids"),
         @SerialName(value = "entities.mentions.username") entitiesPeriodMentionsPeriodUsername("entities.mentions.username"),
         @SerialName(value = "referenced_tweets.id.author_id") referencedTweetsPeriodIdPeriodAuthorId("referenced_tweets.id.author_id"),
         ;
     }

    /**
     * enum for parameter tweetFields
     */
     enum class TweetFields_usersIdLikedTweets(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "created_at") createdAt("created_at"),
         @SerialName(value = "text") text("text"),
         @SerialName(value = "author_id") authorId("author_id"),
         @SerialName(value = "in_reply_to_user_id") inReplyToUserId("in_reply_to_user_id"),
         @SerialName(value = "referenced_tweets") referencedTweets("referenced_tweets"),
         @SerialName(value = "attachments") attachments("attachments"),
         @SerialName(value = "withheld") withheld("withheld"),
         @SerialName(value = "geo") geo("geo"),
         @SerialName(value = "entities") entities("entities"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         @SerialName(value = "possibly_sensitive") possiblySensitive("possibly_sensitive"),
         @SerialName(value = "source") source("source"),
         @SerialName(value = "lang") lang("lang"),
         @SerialName(value = "context_annotations") contextAnnotations("context_annotations"),
         @SerialName(value = "non_public_metrics") nonPublicMetrics("non_public_metrics"),
         @SerialName(value = "promoted_metrics") promotedMetrics("promoted_metrics"),
         @SerialName(value = "organic_metrics") organicMetrics("organic_metrics"),
         @SerialName(value = "conversation_id") conversationId("conversation_id"),
         @SerialName(value = "reply_settings") replySettings("reply_settings"),
         ;
     }

    /**
     * enum for parameter userFields
     */
     enum class UserFields_usersIdLikedTweets(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "created_at") createdAt("created_at"),
         @SerialName(value = "name") name("name"),
         @SerialName(value = "username") username("username"),
         @SerialName(value = "protected") `protected`("protected"),
         @SerialName(value = "verified") verified("verified"),
         @SerialName(value = "withheld") withheld("withheld"),
         @SerialName(value = "profile_image_url") profileImageUrl("profile_image_url"),
         @SerialName(value = "location") location("location"),
         @SerialName(value = "url") url("url"),
         @SerialName(value = "description") description("description"),
         @SerialName(value = "entities") entities("entities"),
         @SerialName(value = "pinned_tweet_id") pinnedTweetId("pinned_tweet_id"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         ;
     }

    /**
     * enum for parameter mediaFields
     */
     enum class MediaFields_usersIdLikedTweets(val value: kotlin.String) {
         @SerialName(value = "media_key") mediaKey("media_key"),
         @SerialName(value = "duration_ms") durationMs("duration_ms"),
         @SerialName(value = "height") height("height"),
         @SerialName(value = "preview_image_url") previewImageUrl("preview_image_url"),
         @SerialName(value = "type") type("type"),
         @SerialName(value = "url") url("url"),
         @SerialName(value = "width") width("width"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         @SerialName(value = "non_public_metrics") nonPublicMetrics("non_public_metrics"),
         @SerialName(value = "organic_metrics") organicMetrics("organic_metrics"),
         @SerialName(value = "promoted_metrics") promotedMetrics("promoted_metrics"),
         @SerialName(value = "alt_text") altText("alt_text"),
         @SerialName(value = "variants") variants("variants"),
         ;
     }

    /**
     * enum for parameter placeFields
     */
     enum class PlaceFields_usersIdLikedTweets(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "name") name("name"),
         @SerialName(value = "country_code") countryCode("country_code"),
         @SerialName(value = "place_type") placeType("place_type"),
         @SerialName(value = "full_name") fullName("full_name"),
         @SerialName(value = "country") country("country"),
         @SerialName(value = "contained_within") containedWithin("contained_within"),
         @SerialName(value = "geo") geo("geo"),
         ;
     }

    /**
     * enum for parameter pollFields
     */
     enum class PollFields_usersIdLikedTweets(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "options") options("options"),
         @SerialName(value = "voting_status") votingStatus("voting_status"),
         @SerialName(value = "end_datetime") endDatetime("end_datetime"),
         @SerialName(value = "duration_minutes") durationMinutes("duration_minutes"),
         ;
     }

    /**
    * Returns Tweet objects liked by the provided User ID
    * Returns a list of Tweets liked by the provided User ID
    * @param id The ID of the User to list the liked Tweets of 
    * @param maxResults The maximum number of results (optional)
    * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param tweetFields A comma separated list of Tweet fields to display. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @param mediaFields A comma separated list of Media fields to display. (optional)
    * @param placeFields A comma separated list of Place fields to display. (optional)
    * @param pollFields A comma separated list of Poll fields to display. (optional)
    * @return InlineResponse2002Entity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usersIdLikedTweets(id: kotlin.String, maxResults: kotlin.Int?, paginationToken: kotlin.String?, expansions: kotlin.collections.List<Expansions_usersIdLikedTweets>?, tweetFields: kotlin.collections.List<TweetFields_usersIdLikedTweets>?, userFields: kotlin.collections.List<UserFields_usersIdLikedTweets>?, mediaFields: kotlin.collections.List<MediaFields_usersIdLikedTweets>?, placeFields: kotlin.collections.List<PlaceFields_usersIdLikedTweets>?, pollFields: kotlin.collections.List<PollFields_usersIdLikedTweets>?) : InlineResponse2002Entity {
        val localVarResponse = usersIdLikedTweetsWithHttpInfo(id = id, maxResults = maxResults, paginationToken = paginationToken, expansions = expansions, tweetFields = tweetFields, userFields = userFields, mediaFields = mediaFields, placeFields = placeFields, pollFields = pollFields)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse2002Entity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Returns Tweet objects liked by the provided User ID
    * Returns a list of Tweets liked by the provided User ID
    * @param id The ID of the User to list the liked Tweets of 
    * @param maxResults The maximum number of results (optional)
    * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param tweetFields A comma separated list of Tweet fields to display. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @param mediaFields A comma separated list of Media fields to display. (optional)
    * @param placeFields A comma separated list of Place fields to display. (optional)
    * @param pollFields A comma separated list of Poll fields to display. (optional)
    * @return ApiResponse<InlineResponse2002Entity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usersIdLikedTweetsWithHttpInfo(id: kotlin.String, maxResults: kotlin.Int?, paginationToken: kotlin.String?, expansions: kotlin.collections.List<Expansions_usersIdLikedTweets>?, tweetFields: kotlin.collections.List<TweetFields_usersIdLikedTweets>?, userFields: kotlin.collections.List<UserFields_usersIdLikedTweets>?, mediaFields: kotlin.collections.List<MediaFields_usersIdLikedTweets>?, placeFields: kotlin.collections.List<PlaceFields_usersIdLikedTweets>?, pollFields: kotlin.collections.List<PollFields_usersIdLikedTweets>?) : ApiResponse<InlineResponse2002Entity?> {
        val localVariableConfig = usersIdLikedTweetsRequestConfig(id = id, maxResults = maxResults, paginationToken = paginationToken, expansions = expansions, tweetFields = tweetFields, userFields = userFields, mediaFields = mediaFields, placeFields = placeFields, pollFields = pollFields)

        return request<Unit, InlineResponse2002Entity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation usersIdLikedTweets
    *
    * @param id The ID of the User to list the liked Tweets of 
    * @param maxResults The maximum number of results (optional)
    * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param tweetFields A comma separated list of Tweet fields to display. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @param mediaFields A comma separated list of Media fields to display. (optional)
    * @param placeFields A comma separated list of Place fields to display. (optional)
    * @param pollFields A comma separated list of Poll fields to display. (optional)
    * @return RequestConfig
    */
    fun usersIdLikedTweetsRequestConfig(id: kotlin.String, maxResults: kotlin.Int?, paginationToken: kotlin.String?, expansions: kotlin.collections.List<Expansions_usersIdLikedTweets>?, tweetFields: kotlin.collections.List<TweetFields_usersIdLikedTweets>?, userFields: kotlin.collections.List<UserFields_usersIdLikedTweets>?, mediaFields: kotlin.collections.List<MediaFields_usersIdLikedTweets>?, placeFields: kotlin.collections.List<PlaceFields_usersIdLikedTweets>?, pollFields: kotlin.collections.List<PollFields_usersIdLikedTweets>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (maxResults != null) {
                    put("max_results", listOf(maxResults.toString()))
                }
                if (paginationToken != null) {
                    put("pagination_token", listOf(paginationToken.toString()))
                }
                if (expansions != null) {
                    put("expansions", toMultiValue(expansions.toList(), "csv"))
                }
                if (tweetFields != null) {
                    put("tweet.fields", toMultiValue(tweetFields.toList(), "csv"))
                }
                if (userFields != null) {
                    put("user.fields", toMultiValue(userFields.toList(), "csv"))
                }
                if (mediaFields != null) {
                    put("media.fields", toMultiValue(mediaFields.toList(), "csv"))
                }
                if (placeFields != null) {
                    put("place.fields", toMultiValue(placeFields.toList(), "csv"))
                }
                if (pollFields != null) {
                    put("poll.fields", toMultiValue(pollFields.toList(), "csv"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/users/{id}/liked_tweets".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter expansions
     */
     enum class Expansions_usersIdMentions(val value: kotlin.String) {
         @SerialName(value = "author_id") authorId("author_id"),
         @SerialName(value = "referenced_tweets.id") referencedTweetsPeriodId("referenced_tweets.id"),
         @SerialName(value = "in_reply_to_user_id") inReplyToUserId("in_reply_to_user_id"),
         @SerialName(value = "geo.place_id") geoPeriodPlaceId("geo.place_id"),
         @SerialName(value = "attachments.media_keys") attachmentsPeriodMediaKeys("attachments.media_keys"),
         @SerialName(value = "attachments.poll_ids") attachmentsPeriodPollIds("attachments.poll_ids"),
         @SerialName(value = "entities.mentions.username") entitiesPeriodMentionsPeriodUsername("entities.mentions.username"),
         @SerialName(value = "referenced_tweets.id.author_id") referencedTweetsPeriodIdPeriodAuthorId("referenced_tweets.id.author_id"),
         ;
     }

    /**
     * enum for parameter tweetFields
     */
     enum class TweetFields_usersIdMentions(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "created_at") createdAt("created_at"),
         @SerialName(value = "text") text("text"),
         @SerialName(value = "author_id") authorId("author_id"),
         @SerialName(value = "in_reply_to_user_id") inReplyToUserId("in_reply_to_user_id"),
         @SerialName(value = "referenced_tweets") referencedTweets("referenced_tweets"),
         @SerialName(value = "attachments") attachments("attachments"),
         @SerialName(value = "withheld") withheld("withheld"),
         @SerialName(value = "geo") geo("geo"),
         @SerialName(value = "entities") entities("entities"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         @SerialName(value = "possibly_sensitive") possiblySensitive("possibly_sensitive"),
         @SerialName(value = "source") source("source"),
         @SerialName(value = "lang") lang("lang"),
         @SerialName(value = "context_annotations") contextAnnotations("context_annotations"),
         @SerialName(value = "non_public_metrics") nonPublicMetrics("non_public_metrics"),
         @SerialName(value = "promoted_metrics") promotedMetrics("promoted_metrics"),
         @SerialName(value = "organic_metrics") organicMetrics("organic_metrics"),
         @SerialName(value = "conversation_id") conversationId("conversation_id"),
         @SerialName(value = "reply_settings") replySettings("reply_settings"),
         ;
     }

    /**
     * enum for parameter userFields
     */
     enum class UserFields_usersIdMentions(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "created_at") createdAt("created_at"),
         @SerialName(value = "name") name("name"),
         @SerialName(value = "username") username("username"),
         @SerialName(value = "protected") `protected`("protected"),
         @SerialName(value = "verified") verified("verified"),
         @SerialName(value = "withheld") withheld("withheld"),
         @SerialName(value = "profile_image_url") profileImageUrl("profile_image_url"),
         @SerialName(value = "location") location("location"),
         @SerialName(value = "url") url("url"),
         @SerialName(value = "description") description("description"),
         @SerialName(value = "entities") entities("entities"),
         @SerialName(value = "pinned_tweet_id") pinnedTweetId("pinned_tweet_id"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         ;
     }

    /**
     * enum for parameter mediaFields
     */
     enum class MediaFields_usersIdMentions(val value: kotlin.String) {
         @SerialName(value = "media_key") mediaKey("media_key"),
         @SerialName(value = "duration_ms") durationMs("duration_ms"),
         @SerialName(value = "height") height("height"),
         @SerialName(value = "preview_image_url") previewImageUrl("preview_image_url"),
         @SerialName(value = "type") type("type"),
         @SerialName(value = "url") url("url"),
         @SerialName(value = "width") width("width"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         @SerialName(value = "non_public_metrics") nonPublicMetrics("non_public_metrics"),
         @SerialName(value = "organic_metrics") organicMetrics("organic_metrics"),
         @SerialName(value = "promoted_metrics") promotedMetrics("promoted_metrics"),
         @SerialName(value = "alt_text") altText("alt_text"),
         @SerialName(value = "variants") variants("variants"),
         ;
     }

    /**
     * enum for parameter placeFields
     */
     enum class PlaceFields_usersIdMentions(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "name") name("name"),
         @SerialName(value = "country_code") countryCode("country_code"),
         @SerialName(value = "place_type") placeType("place_type"),
         @SerialName(value = "full_name") fullName("full_name"),
         @SerialName(value = "country") country("country"),
         @SerialName(value = "contained_within") containedWithin("contained_within"),
         @SerialName(value = "geo") geo("geo"),
         ;
     }

    /**
     * enum for parameter pollFields
     */
     enum class PollFields_usersIdMentions(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "options") options("options"),
         @SerialName(value = "voting_status") votingStatus("voting_status"),
         @SerialName(value = "end_datetime") endDatetime("end_datetime"),
         @SerialName(value = "duration_minutes") durationMinutes("duration_minutes"),
         ;
     }

    /**
    * User mention timeline by User ID
    * Returns Tweet objects that mention username associated to the provided User ID
    * @param id The ID of the User to list mentions of 
    * @param sinceId The minimum Tweet ID to be included in the result set. This parameter takes precedence over start_time if both are specified. (optional)
    * @param untilId The maximum Tweet ID to be included in the result set. This parameter takes precedence over end_time if both are specified. (optional)
    * @param maxResults The maximum number of results (optional)
    * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. (optional)
    * @param startTime YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweets will be provided. The since_id parameter takes precedence if it is also specified. (optional)
    * @param endTime YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided. The until_id parameter takes precedence if it is also specified. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param tweetFields A comma separated list of Tweet fields to display. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @param mediaFields A comma separated list of Media fields to display. (optional)
    * @param placeFields A comma separated list of Place fields to display. (optional)
    * @param pollFields A comma separated list of Poll fields to display. (optional)
    * @return GenericTweetsTimelineResponseEntity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usersIdMentions(id: kotlin.String, sinceId: kotlin.String?, untilId: kotlin.String?, maxResults: kotlin.Int?, paginationToken: kotlin.String?, startTime: java.time.OffsetDateTime?, endTime: java.time.OffsetDateTime?, expansions: kotlin.collections.List<Expansions_usersIdMentions>?, tweetFields: kotlin.collections.List<TweetFields_usersIdMentions>?, userFields: kotlin.collections.List<UserFields_usersIdMentions>?, mediaFields: kotlin.collections.List<MediaFields_usersIdMentions>?, placeFields: kotlin.collections.List<PlaceFields_usersIdMentions>?, pollFields: kotlin.collections.List<PollFields_usersIdMentions>?) : GenericTweetsTimelineResponseEntity {
        val localVarResponse = usersIdMentionsWithHttpInfo(id = id, sinceId = sinceId, untilId = untilId, maxResults = maxResults, paginationToken = paginationToken, startTime = startTime, endTime = endTime, expansions = expansions, tweetFields = tweetFields, userFields = userFields, mediaFields = mediaFields, placeFields = placeFields, pollFields = pollFields)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GenericTweetsTimelineResponseEntity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * User mention timeline by User ID
    * Returns Tweet objects that mention username associated to the provided User ID
    * @param id The ID of the User to list mentions of 
    * @param sinceId The minimum Tweet ID to be included in the result set. This parameter takes precedence over start_time if both are specified. (optional)
    * @param untilId The maximum Tweet ID to be included in the result set. This parameter takes precedence over end_time if both are specified. (optional)
    * @param maxResults The maximum number of results (optional)
    * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. (optional)
    * @param startTime YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweets will be provided. The since_id parameter takes precedence if it is also specified. (optional)
    * @param endTime YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided. The until_id parameter takes precedence if it is also specified. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param tweetFields A comma separated list of Tweet fields to display. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @param mediaFields A comma separated list of Media fields to display. (optional)
    * @param placeFields A comma separated list of Place fields to display. (optional)
    * @param pollFields A comma separated list of Poll fields to display. (optional)
    * @return ApiResponse<GenericTweetsTimelineResponseEntity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usersIdMentionsWithHttpInfo(id: kotlin.String, sinceId: kotlin.String?, untilId: kotlin.String?, maxResults: kotlin.Int?, paginationToken: kotlin.String?, startTime: java.time.OffsetDateTime?, endTime: java.time.OffsetDateTime?, expansions: kotlin.collections.List<Expansions_usersIdMentions>?, tweetFields: kotlin.collections.List<TweetFields_usersIdMentions>?, userFields: kotlin.collections.List<UserFields_usersIdMentions>?, mediaFields: kotlin.collections.List<MediaFields_usersIdMentions>?, placeFields: kotlin.collections.List<PlaceFields_usersIdMentions>?, pollFields: kotlin.collections.List<PollFields_usersIdMentions>?) : ApiResponse<GenericTweetsTimelineResponseEntity?> {
        val localVariableConfig = usersIdMentionsRequestConfig(id = id, sinceId = sinceId, untilId = untilId, maxResults = maxResults, paginationToken = paginationToken, startTime = startTime, endTime = endTime, expansions = expansions, tweetFields = tweetFields, userFields = userFields, mediaFields = mediaFields, placeFields = placeFields, pollFields = pollFields)

        return request<Unit, GenericTweetsTimelineResponseEntity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation usersIdMentions
    *
    * @param id The ID of the User to list mentions of 
    * @param sinceId The minimum Tweet ID to be included in the result set. This parameter takes precedence over start_time if both are specified. (optional)
    * @param untilId The maximum Tweet ID to be included in the result set. This parameter takes precedence over end_time if both are specified. (optional)
    * @param maxResults The maximum number of results (optional)
    * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. (optional)
    * @param startTime YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweets will be provided. The since_id parameter takes precedence if it is also specified. (optional)
    * @param endTime YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided. The until_id parameter takes precedence if it is also specified. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param tweetFields A comma separated list of Tweet fields to display. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @param mediaFields A comma separated list of Media fields to display. (optional)
    * @param placeFields A comma separated list of Place fields to display. (optional)
    * @param pollFields A comma separated list of Poll fields to display. (optional)
    * @return RequestConfig
    */
    fun usersIdMentionsRequestConfig(id: kotlin.String, sinceId: kotlin.String?, untilId: kotlin.String?, maxResults: kotlin.Int?, paginationToken: kotlin.String?, startTime: java.time.OffsetDateTime?, endTime: java.time.OffsetDateTime?, expansions: kotlin.collections.List<Expansions_usersIdMentions>?, tweetFields: kotlin.collections.List<TweetFields_usersIdMentions>?, userFields: kotlin.collections.List<UserFields_usersIdMentions>?, mediaFields: kotlin.collections.List<MediaFields_usersIdMentions>?, placeFields: kotlin.collections.List<PlaceFields_usersIdMentions>?, pollFields: kotlin.collections.List<PollFields_usersIdMentions>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (sinceId != null) {
                    put("since_id", listOf(sinceId.toString()))
                }
                if (untilId != null) {
                    put("until_id", listOf(untilId.toString()))
                }
                if (maxResults != null) {
                    put("max_results", listOf(maxResults.toString()))
                }
                if (paginationToken != null) {
                    put("pagination_token", listOf(paginationToken.toString()))
                }
                if (startTime != null) {
                    put("start_time", listOf(parseDateToQueryString(startTime)))
                }
                if (endTime != null) {
                    put("end_time", listOf(parseDateToQueryString(endTime)))
                }
                if (expansions != null) {
                    put("expansions", toMultiValue(expansions.toList(), "csv"))
                }
                if (tweetFields != null) {
                    put("tweet.fields", toMultiValue(tweetFields.toList(), "csv"))
                }
                if (userFields != null) {
                    put("user.fields", toMultiValue(userFields.toList(), "csv"))
                }
                if (mediaFields != null) {
                    put("media.fields", toMultiValue(mediaFields.toList(), "csv"))
                }
                if (placeFields != null) {
                    put("place.fields", toMultiValue(placeFields.toList(), "csv"))
                }
                if (pollFields != null) {
                    put("poll.fields", toMultiValue(pollFields.toList(), "csv"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/users/{id}/mentions".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Causes the user (in the path) to retweet the specified tweet
    * Causes the user (in the path) to retweet the specified tweet. The user in the path must match the user context authorizing the request.
    * @param id The ID of the user that is requesting to retweet the tweet 
    * @param usersRetweetsCreateRequestEntity  (optional)
    * @return UsersRetweetsCreateResponseEntity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usersIdRetweets(id: kotlin.String, usersRetweetsCreateRequestEntity: UsersRetweetsCreateRequestEntity?) : UsersRetweetsCreateResponseEntity {
        val localVarResponse = usersIdRetweetsWithHttpInfo(id = id, usersRetweetsCreateRequestEntity = usersRetweetsCreateRequestEntity)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsersRetweetsCreateResponseEntity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Causes the user (in the path) to retweet the specified tweet
    * Causes the user (in the path) to retweet the specified tweet. The user in the path must match the user context authorizing the request.
    * @param id The ID of the user that is requesting to retweet the tweet 
    * @param usersRetweetsCreateRequestEntity  (optional)
    * @return ApiResponse<UsersRetweetsCreateResponseEntity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usersIdRetweetsWithHttpInfo(id: kotlin.String, usersRetweetsCreateRequestEntity: UsersRetweetsCreateRequestEntity?) : ApiResponse<UsersRetweetsCreateResponseEntity?> {
        val localVariableConfig = usersIdRetweetsRequestConfig(id = id, usersRetweetsCreateRequestEntity = usersRetweetsCreateRequestEntity)

        return request<UsersRetweetsCreateRequestEntity, UsersRetweetsCreateResponseEntity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation usersIdRetweets
    *
    * @param id The ID of the user that is requesting to retweet the tweet 
    * @param usersRetweetsCreateRequestEntity  (optional)
    * @return RequestConfig
    */
    fun usersIdRetweetsRequestConfig(id: kotlin.String, usersRetweetsCreateRequestEntity: UsersRetweetsCreateRequestEntity?) : RequestConfig<UsersRetweetsCreateRequestEntity> {
        val localVariableBody = usersRetweetsCreateRequestEntity
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/2/users/{id}/retweets".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter exclude
     */
     enum class Exclude_usersIdTweets(val value: kotlin.String) {
         @SerialName(value = "replies") replies("replies"),
         @SerialName(value = "retweets") retweets("retweets"),
         ;
     }

    /**
     * enum for parameter expansions
     */
     enum class Expansions_usersIdTweets(val value: kotlin.String) {
         @SerialName(value = "author_id") authorId("author_id"),
         @SerialName(value = "referenced_tweets.id") referencedTweetsPeriodId("referenced_tweets.id"),
         @SerialName(value = "in_reply_to_user_id") inReplyToUserId("in_reply_to_user_id"),
         @SerialName(value = "geo.place_id") geoPeriodPlaceId("geo.place_id"),
         @SerialName(value = "attachments.media_keys") attachmentsPeriodMediaKeys("attachments.media_keys"),
         @SerialName(value = "attachments.poll_ids") attachmentsPeriodPollIds("attachments.poll_ids"),
         @SerialName(value = "entities.mentions.username") entitiesPeriodMentionsPeriodUsername("entities.mentions.username"),
         @SerialName(value = "referenced_tweets.id.author_id") referencedTweetsPeriodIdPeriodAuthorId("referenced_tweets.id.author_id"),
         ;
     }

    /**
     * enum for parameter tweetFields
     */
     enum class TweetFields_usersIdTweets(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "created_at") createdAt("created_at"),
         @SerialName(value = "text") text("text"),
         @SerialName(value = "author_id") authorId("author_id"),
         @SerialName(value = "in_reply_to_user_id") inReplyToUserId("in_reply_to_user_id"),
         @SerialName(value = "referenced_tweets") referencedTweets("referenced_tweets"),
         @SerialName(value = "attachments") attachments("attachments"),
         @SerialName(value = "withheld") withheld("withheld"),
         @SerialName(value = "geo") geo("geo"),
         @SerialName(value = "entities") entities("entities"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         @SerialName(value = "possibly_sensitive") possiblySensitive("possibly_sensitive"),
         @SerialName(value = "source") source("source"),
         @SerialName(value = "lang") lang("lang"),
         @SerialName(value = "context_annotations") contextAnnotations("context_annotations"),
         @SerialName(value = "non_public_metrics") nonPublicMetrics("non_public_metrics"),
         @SerialName(value = "promoted_metrics") promotedMetrics("promoted_metrics"),
         @SerialName(value = "organic_metrics") organicMetrics("organic_metrics"),
         @SerialName(value = "conversation_id") conversationId("conversation_id"),
         @SerialName(value = "reply_settings") replySettings("reply_settings"),
         ;
     }

    /**
     * enum for parameter userFields
     */
     enum class UserFields_usersIdTweets(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "created_at") createdAt("created_at"),
         @SerialName(value = "name") name("name"),
         @SerialName(value = "username") username("username"),
         @SerialName(value = "protected") `protected`("protected"),
         @SerialName(value = "verified") verified("verified"),
         @SerialName(value = "withheld") withheld("withheld"),
         @SerialName(value = "profile_image_url") profileImageUrl("profile_image_url"),
         @SerialName(value = "location") location("location"),
         @SerialName(value = "url") url("url"),
         @SerialName(value = "description") description("description"),
         @SerialName(value = "entities") entities("entities"),
         @SerialName(value = "pinned_tweet_id") pinnedTweetId("pinned_tweet_id"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         ;
     }

    /**
     * enum for parameter mediaFields
     */
     enum class MediaFields_usersIdTweets(val value: kotlin.String) {
         @SerialName(value = "media_key") mediaKey("media_key"),
         @SerialName(value = "duration_ms") durationMs("duration_ms"),
         @SerialName(value = "height") height("height"),
         @SerialName(value = "preview_image_url") previewImageUrl("preview_image_url"),
         @SerialName(value = "type") type("type"),
         @SerialName(value = "url") url("url"),
         @SerialName(value = "width") width("width"),
         @SerialName(value = "public_metrics") publicMetrics("public_metrics"),
         @SerialName(value = "non_public_metrics") nonPublicMetrics("non_public_metrics"),
         @SerialName(value = "organic_metrics") organicMetrics("organic_metrics"),
         @SerialName(value = "promoted_metrics") promotedMetrics("promoted_metrics"),
         @SerialName(value = "alt_text") altText("alt_text"),
         @SerialName(value = "variants") variants("variants"),
         ;
     }

    /**
     * enum for parameter placeFields
     */
     enum class PlaceFields_usersIdTweets(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "name") name("name"),
         @SerialName(value = "country_code") countryCode("country_code"),
         @SerialName(value = "place_type") placeType("place_type"),
         @SerialName(value = "full_name") fullName("full_name"),
         @SerialName(value = "country") country("country"),
         @SerialName(value = "contained_within") containedWithin("contained_within"),
         @SerialName(value = "geo") geo("geo"),
         ;
     }

    /**
     * enum for parameter pollFields
     */
     enum class PollFields_usersIdTweets(val value: kotlin.String) {
         @SerialName(value = "id") id("id"),
         @SerialName(value = "options") options("options"),
         @SerialName(value = "voting_status") votingStatus("voting_status"),
         @SerialName(value = "end_datetime") endDatetime("end_datetime"),
         @SerialName(value = "duration_minutes") durationMinutes("duration_minutes"),
         ;
     }

    /**
    * User Tweets timeline by User ID
    * Returns a list of Tweets authored by the provided User ID
    * @param id The ID of the User to list Tweets of 
    * @param sinceId The minimum Tweet ID to be included in the result set. This parameter takes precedence over start_time if both are specified. (optional)
    * @param untilId The maximum Tweet ID to be included in the result set. This parameter takes precedence over end_time if both are specified. (optional)
    * @param maxResults The maximum number of results (optional)
    * @param exclude The set of entities to exclude (e.g. &#39;replies&#39; or &#39;retweets&#39;) (optional)
    * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. (optional)
    * @param startTime YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweets will be provided. The since_id parameter takes precedence if it is also specified. (optional)
    * @param endTime YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided. The until_id parameter takes precedence if it is also specified. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param tweetFields A comma separated list of Tweet fields to display. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @param mediaFields A comma separated list of Media fields to display. (optional)
    * @param placeFields A comma separated list of Place fields to display. (optional)
    * @param pollFields A comma separated list of Poll fields to display. (optional)
    * @return GenericTweetsTimelineResponseEntity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usersIdTweets(id: kotlin.String, sinceId: kotlin.String?, untilId: kotlin.String?, maxResults: kotlin.Int?, exclude: kotlin.collections.List<Exclude_usersIdTweets>?, paginationToken: kotlin.String?, startTime: java.time.OffsetDateTime?, endTime: java.time.OffsetDateTime?, expansions: kotlin.collections.List<Expansions_usersIdTweets>?, tweetFields: kotlin.collections.List<TweetFields_usersIdTweets>?, userFields: kotlin.collections.List<UserFields_usersIdTweets>?, mediaFields: kotlin.collections.List<MediaFields_usersIdTweets>?, placeFields: kotlin.collections.List<PlaceFields_usersIdTweets>?, pollFields: kotlin.collections.List<PollFields_usersIdTweets>?) : GenericTweetsTimelineResponseEntity {
        val localVarResponse = usersIdTweetsWithHttpInfo(id = id, sinceId = sinceId, untilId = untilId, maxResults = maxResults, exclude = exclude, paginationToken = paginationToken, startTime = startTime, endTime = endTime, expansions = expansions, tweetFields = tweetFields, userFields = userFields, mediaFields = mediaFields, placeFields = placeFields, pollFields = pollFields)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GenericTweetsTimelineResponseEntity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * User Tweets timeline by User ID
    * Returns a list of Tweets authored by the provided User ID
    * @param id The ID of the User to list Tweets of 
    * @param sinceId The minimum Tweet ID to be included in the result set. This parameter takes precedence over start_time if both are specified. (optional)
    * @param untilId The maximum Tweet ID to be included in the result set. This parameter takes precedence over end_time if both are specified. (optional)
    * @param maxResults The maximum number of results (optional)
    * @param exclude The set of entities to exclude (e.g. &#39;replies&#39; or &#39;retweets&#39;) (optional)
    * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. (optional)
    * @param startTime YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweets will be provided. The since_id parameter takes precedence if it is also specified. (optional)
    * @param endTime YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided. The until_id parameter takes precedence if it is also specified. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param tweetFields A comma separated list of Tweet fields to display. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @param mediaFields A comma separated list of Media fields to display. (optional)
    * @param placeFields A comma separated list of Place fields to display. (optional)
    * @param pollFields A comma separated list of Poll fields to display. (optional)
    * @return ApiResponse<GenericTweetsTimelineResponseEntity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usersIdTweetsWithHttpInfo(id: kotlin.String, sinceId: kotlin.String?, untilId: kotlin.String?, maxResults: kotlin.Int?, exclude: kotlin.collections.List<Exclude_usersIdTweets>?, paginationToken: kotlin.String?, startTime: java.time.OffsetDateTime?, endTime: java.time.OffsetDateTime?, expansions: kotlin.collections.List<Expansions_usersIdTweets>?, tweetFields: kotlin.collections.List<TweetFields_usersIdTweets>?, userFields: kotlin.collections.List<UserFields_usersIdTweets>?, mediaFields: kotlin.collections.List<MediaFields_usersIdTweets>?, placeFields: kotlin.collections.List<PlaceFields_usersIdTweets>?, pollFields: kotlin.collections.List<PollFields_usersIdTweets>?) : ApiResponse<GenericTweetsTimelineResponseEntity?> {
        val localVariableConfig = usersIdTweetsRequestConfig(id = id, sinceId = sinceId, untilId = untilId, maxResults = maxResults, exclude = exclude, paginationToken = paginationToken, startTime = startTime, endTime = endTime, expansions = expansions, tweetFields = tweetFields, userFields = userFields, mediaFields = mediaFields, placeFields = placeFields, pollFields = pollFields)

        return request<Unit, GenericTweetsTimelineResponseEntity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation usersIdTweets
    *
    * @param id The ID of the User to list Tweets of 
    * @param sinceId The minimum Tweet ID to be included in the result set. This parameter takes precedence over start_time if both are specified. (optional)
    * @param untilId The maximum Tweet ID to be included in the result set. This parameter takes precedence over end_time if both are specified. (optional)
    * @param maxResults The maximum number of results (optional)
    * @param exclude The set of entities to exclude (e.g. &#39;replies&#39; or &#39;retweets&#39;) (optional)
    * @param paginationToken This parameter is used to get the next &#39;page&#39; of results. (optional)
    * @param startTime YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweets will be provided. The since_id parameter takes precedence if it is also specified. (optional)
    * @param endTime YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided. The until_id parameter takes precedence if it is also specified. (optional)
    * @param expansions A comma separated list of fields to expand. (optional)
    * @param tweetFields A comma separated list of Tweet fields to display. (optional)
    * @param userFields A comma separated list of User fields to display. (optional)
    * @param mediaFields A comma separated list of Media fields to display. (optional)
    * @param placeFields A comma separated list of Place fields to display. (optional)
    * @param pollFields A comma separated list of Poll fields to display. (optional)
    * @return RequestConfig
    */
    fun usersIdTweetsRequestConfig(id: kotlin.String, sinceId: kotlin.String?, untilId: kotlin.String?, maxResults: kotlin.Int?, exclude: kotlin.collections.List<Exclude_usersIdTweets>?, paginationToken: kotlin.String?, startTime: java.time.OffsetDateTime?, endTime: java.time.OffsetDateTime?, expansions: kotlin.collections.List<Expansions_usersIdTweets>?, tweetFields: kotlin.collections.List<TweetFields_usersIdTweets>?, userFields: kotlin.collections.List<UserFields_usersIdTweets>?, mediaFields: kotlin.collections.List<MediaFields_usersIdTweets>?, placeFields: kotlin.collections.List<PlaceFields_usersIdTweets>?, pollFields: kotlin.collections.List<PollFields_usersIdTweets>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (sinceId != null) {
                    put("since_id", listOf(sinceId.toString()))
                }
                if (untilId != null) {
                    put("until_id", listOf(untilId.toString()))
                }
                if (maxResults != null) {
                    put("max_results", listOf(maxResults.toString()))
                }
                if (exclude != null) {
                    put("exclude", toMultiValue(exclude.toList(), "csv"))
                }
                if (paginationToken != null) {
                    put("pagination_token", listOf(paginationToken.toString()))
                }
                if (startTime != null) {
                    put("start_time", listOf(parseDateToQueryString(startTime)))
                }
                if (endTime != null) {
                    put("end_time", listOf(parseDateToQueryString(endTime)))
                }
                if (expansions != null) {
                    put("expansions", toMultiValue(expansions.toList(), "csv"))
                }
                if (tweetFields != null) {
                    put("tweet.fields", toMultiValue(tweetFields.toList(), "csv"))
                }
                if (userFields != null) {
                    put("user.fields", toMultiValue(userFields.toList(), "csv"))
                }
                if (mediaFields != null) {
                    put("media.fields", toMultiValue(mediaFields.toList(), "csv"))
                }
                if (placeFields != null) {
                    put("place.fields", toMultiValue(placeFields.toList(), "csv"))
                }
                if (pollFields != null) {
                    put("poll.fields", toMultiValue(pollFields.toList(), "csv"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/users/{id}/tweets".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Causes the user (in the path) to unlike the specified tweet
    * Causes the user (in the path) to unlike the specified tweet. The user must match the user context authorizing the request
    * @param id The ID of the user that is requesting to unlike the tweet 
    * @param tweetId The ID of the tweet that the user is requesting to unlike 
    * @return UsersLikesDeleteResponseEntity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usersIdUnlike(id: kotlin.String, tweetId: kotlin.String) : UsersLikesDeleteResponseEntity {
        val localVarResponse = usersIdUnlikeWithHttpInfo(id = id, tweetId = tweetId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsersLikesDeleteResponseEntity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Causes the user (in the path) to unlike the specified tweet
    * Causes the user (in the path) to unlike the specified tweet. The user must match the user context authorizing the request
    * @param id The ID of the user that is requesting to unlike the tweet 
    * @param tweetId The ID of the tweet that the user is requesting to unlike 
    * @return ApiResponse<UsersLikesDeleteResponseEntity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usersIdUnlikeWithHttpInfo(id: kotlin.String, tweetId: kotlin.String) : ApiResponse<UsersLikesDeleteResponseEntity?> {
        val localVariableConfig = usersIdUnlikeRequestConfig(id = id, tweetId = tweetId)

        return request<Unit, UsersLikesDeleteResponseEntity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation usersIdUnlike
    *
    * @param id The ID of the user that is requesting to unlike the tweet 
    * @param tweetId The ID of the tweet that the user is requesting to unlike 
    * @return RequestConfig
    */
    fun usersIdUnlikeRequestConfig(id: kotlin.String, tweetId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/2/users/{id}/likes/{tweet_id}".replace("{"+"id"+"}", "$id").replace("{"+"tweet_id"+"}", "$tweetId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Causes the user (in the path) to unretweet the specified tweet
    * Causes the user (in the path) to unretweet the specified tweet. The user must match the user context authorizing the request
    * @param id The ID of the user that is requesting to unretweet the tweet 
    * @param sourceTweetId The ID of the tweet that the user is requesting to unretweet 
    * @return UsersRetweetsDeleteResponseEntity
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usersIdUnretweets(id: kotlin.String, sourceTweetId: kotlin.String) : UsersRetweetsDeleteResponseEntity {
        val localVarResponse = usersIdUnretweetsWithHttpInfo(id = id, sourceTweetId = sourceTweetId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsersRetweetsDeleteResponseEntity
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Causes the user (in the path) to unretweet the specified tweet
    * Causes the user (in the path) to unretweet the specified tweet. The user must match the user context authorizing the request
    * @param id The ID of the user that is requesting to unretweet the tweet 
    * @param sourceTweetId The ID of the tweet that the user is requesting to unretweet 
    * @return ApiResponse<UsersRetweetsDeleteResponseEntity?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usersIdUnretweetsWithHttpInfo(id: kotlin.String, sourceTweetId: kotlin.String) : ApiResponse<UsersRetweetsDeleteResponseEntity?> {
        val localVariableConfig = usersIdUnretweetsRequestConfig(id = id, sourceTweetId = sourceTweetId)

        return request<Unit, UsersRetweetsDeleteResponseEntity>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation usersIdUnretweets
    *
    * @param id The ID of the user that is requesting to unretweet the tweet 
    * @param sourceTweetId The ID of the tweet that the user is requesting to unretweet 
    * @return RequestConfig
    */
    fun usersIdUnretweetsRequestConfig(id: kotlin.String, sourceTweetId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/2/users/{id}/retweets/{source_tweet_id}".replace("{"+"id"+"}", "$id").replace("{"+"source_tweet_id"+"}", "$sourceTweetId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
