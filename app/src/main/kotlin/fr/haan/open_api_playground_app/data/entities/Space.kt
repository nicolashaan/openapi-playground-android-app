/**
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.42
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package fr.haan.open_api_playground_app.data.entities

import fr.haan.open_api_playground_app.data.entities.SpaceTopics

import com.squareup.moshi.Json

/**
 * 
 *
 * @param id The unique identifier of this Space.
 * @param state The current state of the space.
 * @param startedAt When the space was started as a date string
 * @param isTicketed Denotes if the space is a ticketed space
 * @param participantCount The number of participants in a space
 * @param title The title of the space
 * @param hostIds The user ids for the hosts of the space
 * @param updatedAt When the space was last updated
 * @param createdAt Creation time of the space
 * @param creatorId Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
 * @param lang The language of the space
 * @param speakerIds An array of user ids for people who were speakers in a space
 * @param invitedUserIds An array of user ids for people who were invited to a space
 * @param scheduledStart A date time stamp for when a space is scheduled to begin
 * @param endedAt End time of the space
 * @param topics The topics of a space, as selected by its creator
 * @param subscriberCount The number of people who have either purchased a ticket or set a reminder for this space.
 */

data class Space (

    /* The unique identifier of this Space. */
    @Json(name = "id")
    val id: kotlin.String,

    /* The current state of the space. */
    @Json(name = "state")
    val state: Space.State,

    /* When the space was started as a date string */
    @Json(name = "started_at")
    val startedAt: java.time.OffsetDateTime? = null,

    /* Denotes if the space is a ticketed space */
    @Json(name = "is_ticketed")
    val isTicketed: kotlin.Boolean? = null,

    /* The number of participants in a space */
    @Json(name = "participant_count")
    val participantCount: kotlin.Int? = null,

    /* The title of the space */
    @Json(name = "title")
    val title: kotlin.String? = null,

    /* The user ids for the hosts of the space */
    @Json(name = "host_ids")
    val hostIds: kotlin.collections.List<kotlin.String>? = null,

    /* When the space was last updated */
    @Json(name = "updated_at")
    val updatedAt: java.time.OffsetDateTime? = null,

    /* Creation time of the space */
    @Json(name = "created_at")
    val createdAt: java.time.OffsetDateTime? = null,

    /* Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers. */
    @Json(name = "creator_id")
    val creatorId: kotlin.String? = null,

    /* The language of the space */
    @Json(name = "lang")
    val lang: kotlin.String? = null,

    /* An array of user ids for people who were speakers in a space */
    @Json(name = "speaker_ids")
    val speakerIds: kotlin.collections.List<kotlin.String>? = null,

    /* An array of user ids for people who were invited to a space */
    @Json(name = "invited_user_ids")
    val invitedUserIds: kotlin.collections.List<kotlin.String>? = null,

    /* A date time stamp for when a space is scheduled to begin */
    @Json(name = "scheduled_start")
    val scheduledStart: java.time.OffsetDateTime? = null,

    /* End time of the space */
    @Json(name = "ended_at")
    val endedAt: java.time.OffsetDateTime? = null,

    /* The topics of a space, as selected by its creator */
    @Json(name = "topics")
    val topics: kotlin.collections.List<SpaceTopics>? = null,

    /* The number of people who have either purchased a ticket or set a reminder for this space. */
    @Json(name = "subscriber_count")
    val subscriberCount: kotlin.Int? = null

) {

    /**
     * The current state of the space.
     *
     * Values: live,scheduled,ended
     */
    enum class State(val value: kotlin.String) {
        @Json(name = "live") live("live"),
        @Json(name = "scheduled") scheduled("scheduled"),
        @Json(name = "ended") ended("ended");
    }
}

